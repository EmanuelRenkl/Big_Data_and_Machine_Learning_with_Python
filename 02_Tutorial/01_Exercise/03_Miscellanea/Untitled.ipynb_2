{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Unknown property market",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-e263cb5a3432>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarket\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"x\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2811\u001b[0m     return gca().plot(\n\u001b[1;32m   2812\u001b[0m         *args, scalex=scalex, scaley=scaley, **({\"data\": data} if data\n\u001b[0;32m-> 2813\u001b[0;31m         is not None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2814\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2815\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1808\u001b[0m                         \u001b[0;34m\"the Matplotlib list!)\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlabel_namer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1809\u001b[0m                         RuntimeWarning, stacklevel=2)\n\u001b[0;32m-> 1810\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1811\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1812\u001b[0m         inner.__doc__ = _add_data_doc(inner.__doc__,\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1609\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_alias_map\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1610\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1611\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1612\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1613\u001b[0m             \u001b[0mlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_grab_next_args\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    391\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 393\u001b[0;31m             \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_plot_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs)\u001b[0m\n\u001b[1;32m    381\u001b[0m                                   \"with non-matching shapes is deprecated.\")\n\u001b[1;32m    382\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mncx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mncy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 383\u001b[0;31m             \u001b[0mseg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mncx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mncy\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    384\u001b[0m             \u001b[0mret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_makeline\u001b[0;34m(self, x, y, kw, kwargs)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0mdefault_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getdefaults\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setdefaults\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdefault_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m         \u001b[0mseg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    289\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mseg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/lines.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, xdata, ydata, linewidth, linestyle, color, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)\u001b[0m\n\u001b[1;32m    408\u001b[0m         \u001b[0;31m# update kwargs before updating data to give the caller a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m         \u001b[0;31m# chance to init axes (and hence unit support)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 410\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    411\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpickradius\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickradius\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    412\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mind_offset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, props)\u001b[0m\n\u001b[1;32m    914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    915\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 916\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    917\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    918\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    915\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 916\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    917\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    918\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_update_property\u001b[0;34m(self, k, v)\u001b[0m\n\u001b[1;32m    910\u001b[0m                 \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'set_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 912\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Unknown property %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    913\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: Unknown property market"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "x = np.linspace(-10,10,100)\n",
    "y = np.sin(x)\n",
    "plt.plot(x, y, market = \"x\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11fc197f0>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "x = np.linspace(-10,10,100)\n",
    "y = np.sin(x)\n",
    "plt.plot(x,y, marker = \"x\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "FNAME = \"http://www.stat.ucla.edu/projects/datasets/twins.dat\"\n",
    "\n",
    "df = pd.read_csv(FNAME, sep=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(183, 16)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.head of          DLHRWAGE  DEDUC1        AGE        AGESQ      HRWAGEH  WHITEH  MALEH  \\\n",
       "0       0.2593466       0  33.251198  1105.642156        11.25       1      0   \n",
       "1               .      -1  54.053388  2921.768764            .       1      0   \n",
       "2     0.721318058       7  43.570157  1898.358618           18       1      0   \n",
       "3     0.011581964       0  30.967830   959.006511         16.5       1      1   \n",
       "4    -0.560984677       0  34.633812  1199.500965       9.6154       1      1   \n",
       "5               .       2  71.603012  5126.991275            .       1      0   \n",
       "6     1.523260216      -2  34.978782  1223.515166           35       1      0   \n",
       "7               .      -1  61.451061  3776.232888           35       1      0   \n",
       "8    -0.223143551      -2  29.338809   860.765716           12       1      1   \n",
       "9    -0.470003629       0  47.605749  2266.307384         6.25       1      0   \n",
       "10    0.051751065      -1  51.901437  2693.759201        17.25       1      1   \n",
       "11    0.287682073       0  36.076660  1301.525384           16       1      1   \n",
       "12              .       4  32.082136  1029.263420            .       1      0   \n",
       "13   -0.470003629      -2  48.120465  2315.579194       15.625       1      0   \n",
       "14    0.305601229       2  33.954825  1152.930172         9.76       1      0   \n",
       "15              .       4  36.041068  1298.958565            .       1      0   \n",
       "16   -0.336472237       0  27.175907   738.529917  1.785714286       1      0   \n",
       "17              .       1  24.544832   602.448793         5.25       1      1   \n",
       "18    0.628608659       2  39.340178  1547.649602           15       1      1   \n",
       "19    0.321583624       1  38.532512  1484.754479           15       1      1   \n",
       "20              .       0  24.657084   607.971801          8.7       1      0   \n",
       "21   -0.378653851       1  23.682409   560.856511  11.41304348       1      0   \n",
       "22   -0.078555719       3  35.663244  1271.866998        13.46       1      0   \n",
       "23     -0.3254224       0  21.349760   455.812271          6.5       0      1   \n",
       "24              .       1  28.900753   835.253519  8.583333333       1      1   \n",
       "25              .       0  30.006845   900.410724           13       1      1   \n",
       "26   -0.494696242       0  33.639973  1131.647758           10       1      0   \n",
       "27    0.497032302       2  24.640657   607.161982           12       1      0   \n",
       "28    0.167054085       0  46.365503  2149.759876         7.15       1      0   \n",
       "29   -1.446918983      -5  43.854894  1923.251720            8       1      1   \n",
       "..            ...     ...        ...          ...          ...     ...    ...   \n",
       "153   0.049122045       0  25.941136   672.942548  16.42857143       1      0   \n",
       "154   0.619039208      -7  31.208761   973.986771           13       0      0   \n",
       "155   0.287682073       2  26.926762   725.050538  13.33333333       1      1   \n",
       "156    1.32175584       1  25.541410   652.363624         6.25       1      0   \n",
       "157             .       0  52.550308  2761.534872            .       1      0   \n",
       "158             0       0  40.873374  1670.632735           20       0      1   \n",
       "159             .       1  33.251198  1105.642156          9.6       1      0   \n",
       "160  -0.057158414       0  48.249144  2327.979937         4.25       1      0   \n",
       "161  -0.732367894      -1  37.281314  1389.896386            5       1      0   \n",
       "162             .      -1  70.600958  4984.495306            .       1      1   \n",
       "163  -0.322773392       0  29.054073   844.139132         10.5       1      1   \n",
       "164  -0.894651557      -4  30.225873   913.603380         5.45       1      0   \n",
       "165             .       1  52.985626  2807.476593  14.28571429       1      1   \n",
       "166  -0.615957542      -1  37.374401  1396.845857  9.722222222       1      1   \n",
       "167   0.287682073      -1  21.927447   480.812930  6.666666667       1      0   \n",
       "168   0.343771539       0  23.969884   574.555322  10.57692308       1      0   \n",
       "169   0.284451052       0  36.372348  1322.947678         10.3       1      1   \n",
       "170             .       0  22.299795   497.280842            .       1      0   \n",
       "171   0.022927505       0  36.944559  1364.900404           15       1      0   \n",
       "172   0.518260602       4  43.200548  1866.287310        11.25       1      0   \n",
       "173             0       0  18.781656   352.750617         4.25       1      0   \n",
       "174   0.310154928       2  36.621492  1341.133686  13.63636364       1      0   \n",
       "175   0.372250629       2  45.612594  2080.508742  22.32285714       1      0   \n",
       "176   0.093011748       0  29.390828   863.820782          4.5       1      0   \n",
       "177  -0.087016892      -1  38.770705  1503.167566      21.1538       1      0   \n",
       "178   0.109904862       0  45.555099  2075.267067     20.60625       1      0   \n",
       "179             .       0  26.376454   695.717351            .       1      1   \n",
       "180   0.850332764       2  40.312115  1625.066615          5.5       1      0   \n",
       "181  -0.729514825      -2  28.413415   807.322179          7.5       1      0   \n",
       "182  -0.500775288       0  28.413415   807.322179            9       1      0   \n",
       "\n",
       "     EDUCH      HRWAGEL  WHITEL  MALEL  EDUCL  DEDUC2    DTEN  DMARRIED  \\\n",
       "0       16         8.68       1      0     16       0   1.333         0   \n",
       "1        9         7.85       1      0     10       1       8         1   \n",
       "2       19         8.75       1      0     12       4       3        -1   \n",
       "3       12        16.31       1      1     12       0      -2         0   \n",
       "4       14        16.85       1      1     14       1   2.917         0   \n",
       "5       16            .       1      0     14      -2      24         1   \n",
       "6       13         7.63       1      0     15      -2       3         1   \n",
       "7       13            .       1      0     14      -2    25.5         0   \n",
       "8       12           15       1      1     14       1       1        -1   \n",
       "9       12           10       1      0     12       0      -5         0   \n",
       "10      12        16.38       1      1     13      -2       9         0   \n",
       "11      12           12       1      1     12       0       5         0   \n",
       "12      16        31.25       1      0     12       4    -9.5         0   \n",
       "13      17           25       1      0     19      -3      -7         0   \n",
       "14      14         7.19       1      0     12       2       .         0   \n",
       "15      18            .       1      0     14       4       .        -1   \n",
       "16      16          2.5       1      0     16       0   0.417         0   \n",
       "17      13            .       1      1     12       0       .         1   \n",
       "18      14            8       1      1     12      -2      15         1   \n",
       "19      13       10.875       1      1     12      -1       0         0   \n",
       "20      12            .       1      0     12       0      -2         0   \n",
       "21      17  16.66666667       1      0     16       1    -0.5         0   \n",
       "22      15        14.56       1      0     12       2       4         0   \n",
       "23      14            9       0      1     14       0  -0.083         0   \n",
       "24      15            .       1      1     14      -1       0         0   \n",
       "25      12            .       1      1     12       0       0         0   \n",
       "26      12         16.4       1      0     12       0    -6.5        -1   \n",
       "27      16          7.3       1      0     14      -2      -1         0   \n",
       "28      12         6.05       1      0     12       0       1         0   \n",
       "29      15           34       1      1     20      -6      -2         0   \n",
       "..     ...          ...     ...    ...    ...     ...     ...       ...   \n",
       "153     12  15.64106667       1      0     12       0       0         0   \n",
       "154      8            7       1      0     15       7      -7         0   \n",
       "155     16           10       1      1     14       2    -2.5        -1   \n",
       "156     13  1.666666667       1      0     12       1       0         0   \n",
       "157     12  5.952380953       1      0     12       0       0         0   \n",
       "158     12           20       0      1     12       0     4.5        -1   \n",
       "159     13            .       1      0     12       0      -2         0   \n",
       "160     12          4.5       1      0     12       0  -2.993         0   \n",
       "161     12         10.4       1      0     13      -1    -7.5        -1   \n",
       "162     12  6.868095238       1      1     13       0      13         0   \n",
       "163     13         14.5       1      1     13       0    -3.5         0   \n",
       "164     12  13.33333333       1      0     16      -4     2.5        -1   \n",
       "165     13            .       1      1     12       0       3         0   \n",
       "166     12           18       1      1     13       0      -6         0   \n",
       "167     12            5       1      0     13       0    1.75         0   \n",
       "168     16          7.5       1      0     16       0   0.038         0   \n",
       "169     18         7.75       1      1     18       0       2         0   \n",
       "170     12           20       1      0     12       0       0         0   \n",
       "171     16        14.66       1      0     16       0     1.5         1   \n",
       "172     14          6.7       1      0     10       3   14.67         1   \n",
       "173     13         4.25       1      0     13       0  -0.083         0   \n",
       "174     14           10       1      0     12       2       1         0   \n",
       "175     14      15.3845       1      0     12       2      -4         1   \n",
       "176     12  4.100322581       1      0     12       0     3.5         1   \n",
       "177     13       23.077       1      0     14      -1       2         1   \n",
       "178     12  18.46153846       1      0     12       0      -7        -1   \n",
       "179     16        19.65       1      1     16       0    -0.5         0   \n",
       "180     14         2.35       1      0     12       2       2         0   \n",
       "181     14  15.55555556       1      0     16      -2      -2         0   \n",
       "182     16        14.85       1      0     16      -2       3         0   \n",
       "\n",
       "     DUNCOV  \n",
       "0         0  \n",
       "1         0  \n",
       "2         0  \n",
       "3         1  \n",
       "4        -1  \n",
       "5         0  \n",
       "6         0  \n",
       "7         0  \n",
       "8         0  \n",
       "9         0  \n",
       "10        0  \n",
       "11        0  \n",
       "12        0  \n",
       "13        0  \n",
       "14       -1  \n",
       "15        0  \n",
       "16        0  \n",
       "17        0  \n",
       "18        1  \n",
       "19        0  \n",
       "20        1  \n",
       "21        1  \n",
       "22       -1  \n",
       "23        0  \n",
       "24        0  \n",
       "25        0  \n",
       "26       -1  \n",
       "27       -1  \n",
       "28        0  \n",
       "29        0  \n",
       "..      ...  \n",
       "153       0  \n",
       "154      -1  \n",
       "155       0  \n",
       "156       0  \n",
       "157       0  \n",
       "158       0  \n",
       "159       0  \n",
       "160       0  \n",
       "161       0  \n",
       "162      -1  \n",
       "163       0  \n",
       "164       1  \n",
       "165       0  \n",
       "166      -1  \n",
       "167       0  \n",
       "168       0  \n",
       "169       0  \n",
       "170       0  \n",
       "171       0  \n",
       "172       0  \n",
       "173       0  \n",
       "174       0  \n",
       "175       0  \n",
       "176       0  \n",
       "177       0  \n",
       "178       0  \n",
       "179       0  \n",
       "180       0  \n",
       "181       0  \n",
       "182       0  \n",
       "\n",
       "[183 rows x 16 columns]>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.tail of          DLHRWAGE  DEDUC1        AGE        AGESQ      HRWAGEH  WHITEH  MALEH  \\\n",
       "0       0.2593466       0  33.251198  1105.642156        11.25       1      0   \n",
       "1               .      -1  54.053388  2921.768764            .       1      0   \n",
       "2     0.721318058       7  43.570157  1898.358618           18       1      0   \n",
       "3     0.011581964       0  30.967830   959.006511         16.5       1      1   \n",
       "4    -0.560984677       0  34.633812  1199.500965       9.6154       1      1   \n",
       "5               .       2  71.603012  5126.991275            .       1      0   \n",
       "6     1.523260216      -2  34.978782  1223.515166           35       1      0   \n",
       "7               .      -1  61.451061  3776.232888           35       1      0   \n",
       "8    -0.223143551      -2  29.338809   860.765716           12       1      1   \n",
       "9    -0.470003629       0  47.605749  2266.307384         6.25       1      0   \n",
       "10    0.051751065      -1  51.901437  2693.759201        17.25       1      1   \n",
       "11    0.287682073       0  36.076660  1301.525384           16       1      1   \n",
       "12              .       4  32.082136  1029.263420            .       1      0   \n",
       "13   -0.470003629      -2  48.120465  2315.579194       15.625       1      0   \n",
       "14    0.305601229       2  33.954825  1152.930172         9.76       1      0   \n",
       "15              .       4  36.041068  1298.958565            .       1      0   \n",
       "16   -0.336472237       0  27.175907   738.529917  1.785714286       1      0   \n",
       "17              .       1  24.544832   602.448793         5.25       1      1   \n",
       "18    0.628608659       2  39.340178  1547.649602           15       1      1   \n",
       "19    0.321583624       1  38.532512  1484.754479           15       1      1   \n",
       "20              .       0  24.657084   607.971801          8.7       1      0   \n",
       "21   -0.378653851       1  23.682409   560.856511  11.41304348       1      0   \n",
       "22   -0.078555719       3  35.663244  1271.866998        13.46       1      0   \n",
       "23     -0.3254224       0  21.349760   455.812271          6.5       0      1   \n",
       "24              .       1  28.900753   835.253519  8.583333333       1      1   \n",
       "25              .       0  30.006845   900.410724           13       1      1   \n",
       "26   -0.494696242       0  33.639973  1131.647758           10       1      0   \n",
       "27    0.497032302       2  24.640657   607.161982           12       1      0   \n",
       "28    0.167054085       0  46.365503  2149.759876         7.15       1      0   \n",
       "29   -1.446918983      -5  43.854894  1923.251720            8       1      1   \n",
       "..            ...     ...        ...          ...          ...     ...    ...   \n",
       "153   0.049122045       0  25.941136   672.942548  16.42857143       1      0   \n",
       "154   0.619039208      -7  31.208761   973.986771           13       0      0   \n",
       "155   0.287682073       2  26.926762   725.050538  13.33333333       1      1   \n",
       "156    1.32175584       1  25.541410   652.363624         6.25       1      0   \n",
       "157             .       0  52.550308  2761.534872            .       1      0   \n",
       "158             0       0  40.873374  1670.632735           20       0      1   \n",
       "159             .       1  33.251198  1105.642156          9.6       1      0   \n",
       "160  -0.057158414       0  48.249144  2327.979937         4.25       1      0   \n",
       "161  -0.732367894      -1  37.281314  1389.896386            5       1      0   \n",
       "162             .      -1  70.600958  4984.495306            .       1      1   \n",
       "163  -0.322773392       0  29.054073   844.139132         10.5       1      1   \n",
       "164  -0.894651557      -4  30.225873   913.603380         5.45       1      0   \n",
       "165             .       1  52.985626  2807.476593  14.28571429       1      1   \n",
       "166  -0.615957542      -1  37.374401  1396.845857  9.722222222       1      1   \n",
       "167   0.287682073      -1  21.927447   480.812930  6.666666667       1      0   \n",
       "168   0.343771539       0  23.969884   574.555322  10.57692308       1      0   \n",
       "169   0.284451052       0  36.372348  1322.947678         10.3       1      1   \n",
       "170             .       0  22.299795   497.280842            .       1      0   \n",
       "171   0.022927505       0  36.944559  1364.900404           15       1      0   \n",
       "172   0.518260602       4  43.200548  1866.287310        11.25       1      0   \n",
       "173             0       0  18.781656   352.750617         4.25       1      0   \n",
       "174   0.310154928       2  36.621492  1341.133686  13.63636364       1      0   \n",
       "175   0.372250629       2  45.612594  2080.508742  22.32285714       1      0   \n",
       "176   0.093011748       0  29.390828   863.820782          4.5       1      0   \n",
       "177  -0.087016892      -1  38.770705  1503.167566      21.1538       1      0   \n",
       "178   0.109904862       0  45.555099  2075.267067     20.60625       1      0   \n",
       "179             .       0  26.376454   695.717351            .       1      1   \n",
       "180   0.850332764       2  40.312115  1625.066615          5.5       1      0   \n",
       "181  -0.729514825      -2  28.413415   807.322179          7.5       1      0   \n",
       "182  -0.500775288       0  28.413415   807.322179            9       1      0   \n",
       "\n",
       "     EDUCH      HRWAGEL  WHITEL  MALEL  EDUCL  DEDUC2    DTEN  DMARRIED  \\\n",
       "0       16         8.68       1      0     16       0   1.333         0   \n",
       "1        9         7.85       1      0     10       1       8         1   \n",
       "2       19         8.75       1      0     12       4       3        -1   \n",
       "3       12        16.31       1      1     12       0      -2         0   \n",
       "4       14        16.85       1      1     14       1   2.917         0   \n",
       "5       16            .       1      0     14      -2      24         1   \n",
       "6       13         7.63       1      0     15      -2       3         1   \n",
       "7       13            .       1      0     14      -2    25.5         0   \n",
       "8       12           15       1      1     14       1       1        -1   \n",
       "9       12           10       1      0     12       0      -5         0   \n",
       "10      12        16.38       1      1     13      -2       9         0   \n",
       "11      12           12       1      1     12       0       5         0   \n",
       "12      16        31.25       1      0     12       4    -9.5         0   \n",
       "13      17           25       1      0     19      -3      -7         0   \n",
       "14      14         7.19       1      0     12       2       .         0   \n",
       "15      18            .       1      0     14       4       .        -1   \n",
       "16      16          2.5       1      0     16       0   0.417         0   \n",
       "17      13            .       1      1     12       0       .         1   \n",
       "18      14            8       1      1     12      -2      15         1   \n",
       "19      13       10.875       1      1     12      -1       0         0   \n",
       "20      12            .       1      0     12       0      -2         0   \n",
       "21      17  16.66666667       1      0     16       1    -0.5         0   \n",
       "22      15        14.56       1      0     12       2       4         0   \n",
       "23      14            9       0      1     14       0  -0.083         0   \n",
       "24      15            .       1      1     14      -1       0         0   \n",
       "25      12            .       1      1     12       0       0         0   \n",
       "26      12         16.4       1      0     12       0    -6.5        -1   \n",
       "27      16          7.3       1      0     14      -2      -1         0   \n",
       "28      12         6.05       1      0     12       0       1         0   \n",
       "29      15           34       1      1     20      -6      -2         0   \n",
       "..     ...          ...     ...    ...    ...     ...     ...       ...   \n",
       "153     12  15.64106667       1      0     12       0       0         0   \n",
       "154      8            7       1      0     15       7      -7         0   \n",
       "155     16           10       1      1     14       2    -2.5        -1   \n",
       "156     13  1.666666667       1      0     12       1       0         0   \n",
       "157     12  5.952380953       1      0     12       0       0         0   \n",
       "158     12           20       0      1     12       0     4.5        -1   \n",
       "159     13            .       1      0     12       0      -2         0   \n",
       "160     12          4.5       1      0     12       0  -2.993         0   \n",
       "161     12         10.4       1      0     13      -1    -7.5        -1   \n",
       "162     12  6.868095238       1      1     13       0      13         0   \n",
       "163     13         14.5       1      1     13       0    -3.5         0   \n",
       "164     12  13.33333333       1      0     16      -4     2.5        -1   \n",
       "165     13            .       1      1     12       0       3         0   \n",
       "166     12           18       1      1     13       0      -6         0   \n",
       "167     12            5       1      0     13       0    1.75         0   \n",
       "168     16          7.5       1      0     16       0   0.038         0   \n",
       "169     18         7.75       1      1     18       0       2         0   \n",
       "170     12           20       1      0     12       0       0         0   \n",
       "171     16        14.66       1      0     16       0     1.5         1   \n",
       "172     14          6.7       1      0     10       3   14.67         1   \n",
       "173     13         4.25       1      0     13       0  -0.083         0   \n",
       "174     14           10       1      0     12       2       1         0   \n",
       "175     14      15.3845       1      0     12       2      -4         1   \n",
       "176     12  4.100322581       1      0     12       0     3.5         1   \n",
       "177     13       23.077       1      0     14      -1       2         1   \n",
       "178     12  18.46153846       1      0     12       0      -7        -1   \n",
       "179     16        19.65       1      1     16       0    -0.5         0   \n",
       "180     14         2.35       1      0     12       2       2         0   \n",
       "181     14  15.55555556       1      0     16      -2      -2         0   \n",
       "182     16        14.85       1      0     16      -2       3         0   \n",
       "\n",
       "     DUNCOV  \n",
       "0         0  \n",
       "1         0  \n",
       "2         0  \n",
       "3         1  \n",
       "4        -1  \n",
       "5         0  \n",
       "6         0  \n",
       "7         0  \n",
       "8         0  \n",
       "9         0  \n",
       "10        0  \n",
       "11        0  \n",
       "12        0  \n",
       "13        0  \n",
       "14       -1  \n",
       "15        0  \n",
       "16        0  \n",
       "17        0  \n",
       "18        1  \n",
       "19        0  \n",
       "20        1  \n",
       "21        1  \n",
       "22       -1  \n",
       "23        0  \n",
       "24        0  \n",
       "25        0  \n",
       "26       -1  \n",
       "27       -1  \n",
       "28        0  \n",
       "29        0  \n",
       "..      ...  \n",
       "153       0  \n",
       "154      -1  \n",
       "155       0  \n",
       "156       0  \n",
       "157       0  \n",
       "158       0  \n",
       "159       0  \n",
       "160       0  \n",
       "161       0  \n",
       "162      -1  \n",
       "163       0  \n",
       "164       1  \n",
       "165       0  \n",
       "166      -1  \n",
       "167       0  \n",
       "168       0  \n",
       "169       0  \n",
       "170       0  \n",
       "171       0  \n",
       "172       0  \n",
       "173       0  \n",
       "174       0  \n",
       "175       0  \n",
       "176       0  \n",
       "177       0  \n",
       "178       0  \n",
       "179       0  \n",
       "180       0  \n",
       "181       0  \n",
       "182       0  \n",
       "\n",
       "[183 rows x 16 columns]>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DLHRWAGE</th>\n",
       "      <th>DEDUC1</th>\n",
       "      <th>AGE</th>\n",
       "      <th>AGESQ</th>\n",
       "      <th>HRWAGEH</th>\n",
       "      <th>WHITEH</th>\n",
       "      <th>MALEH</th>\n",
       "      <th>EDUCH</th>\n",
       "      <th>HRWAGEL</th>\n",
       "      <th>WHITEL</th>\n",
       "      <th>MALEL</th>\n",
       "      <th>EDUCL</th>\n",
       "      <th>DEDUC2</th>\n",
       "      <th>DTEN</th>\n",
       "      <th>DMARRIED</th>\n",
       "      <th>DUNCOV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>0.109904862</td>\n",
       "      <td>0</td>\n",
       "      <td>45.555099</td>\n",
       "      <td>2075.267067</td>\n",
       "      <td>20.60625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>18.46153846</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-7</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>26.376454</td>\n",
       "      <td>695.717351</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>19.65</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>0.850332764</td>\n",
       "      <td>2</td>\n",
       "      <td>40.312115</td>\n",
       "      <td>1625.066615</td>\n",
       "      <td>5.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>2.35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>-0.729514825</td>\n",
       "      <td>-2</td>\n",
       "      <td>28.413415</td>\n",
       "      <td>807.322179</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>15.55555556</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>-0.500775288</td>\n",
       "      <td>0</td>\n",
       "      <td>28.413415</td>\n",
       "      <td>807.322179</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>14.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>-2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         DLHRWAGE  DEDUC1        AGE        AGESQ   HRWAGEH  WHITEH  MALEH  \\\n",
       "178   0.109904862       0  45.555099  2075.267067  20.60625       1      0   \n",
       "179             .       0  26.376454   695.717351         .       1      1   \n",
       "180   0.850332764       2  40.312115  1625.066615       5.5       1      0   \n",
       "181  -0.729514825      -2  28.413415   807.322179       7.5       1      0   \n",
       "182  -0.500775288       0  28.413415   807.322179         9       1      0   \n",
       "\n",
       "     EDUCH      HRWAGEL  WHITEL  MALEL  EDUCL  DEDUC2  DTEN  DMARRIED  DUNCOV  \n",
       "178     12  18.46153846       1      0     12       0    -7        -1       0  \n",
       "179     16        19.65       1      1     16       0  -0.5         0       0  \n",
       "180     14         2.35       1      0     12       2     2         0       0  \n",
       "181     14  15.55555556       1      0     16      -2    -2         0       0  \n",
       "182     16        14.85       1      0     16      -2     3         0       0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['DLHRWAGE', 'DEDUC1', 'AGE', 'AGESQ', 'HRWAGEH', 'WHITEH', 'MALEH',\n",
       "       'EDUCH', 'HRWAGEL', 'WHITEL', 'MALEL', 'EDUCL', 'DEDUC2', 'DTEN',\n",
       "       'DMARRIED', 'DUNCOV'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEDUC1</th>\n",
       "      <th>AGE</th>\n",
       "      <th>AGESQ</th>\n",
       "      <th>WHITEH</th>\n",
       "      <th>MALEH</th>\n",
       "      <th>EDUCH</th>\n",
       "      <th>WHITEL</th>\n",
       "      <th>MALEL</th>\n",
       "      <th>EDUCL</th>\n",
       "      <th>DEDUC2</th>\n",
       "      <th>DMARRIED</th>\n",
       "      <th>DUNCOV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "      <td>183.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.010929</td>\n",
       "      <td>38.694015</td>\n",
       "      <td>1666.242009</td>\n",
       "      <td>0.934426</td>\n",
       "      <td>0.459016</td>\n",
       "      <td>13.950820</td>\n",
       "      <td>0.939891</td>\n",
       "      <td>0.459016</td>\n",
       "      <td>13.961749</td>\n",
       "      <td>-0.021858</td>\n",
       "      <td>-0.016393</td>\n",
       "      <td>0.021858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.881048</td>\n",
       "      <td>13.036251</td>\n",
       "      <td>1181.710178</td>\n",
       "      <td>0.248215</td>\n",
       "      <td>0.499685</td>\n",
       "      <td>2.332943</td>\n",
       "      <td>0.238341</td>\n",
       "      <td>0.499685</td>\n",
       "      <td>2.204805</td>\n",
       "      <td>1.886785</td>\n",
       "      <td>0.507909</td>\n",
       "      <td>0.491200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-7.000000</td>\n",
       "      <td>18.781656</td>\n",
       "      <td>352.750617</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>-6.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-1.000000</td>\n",
       "      <td>28.977413</td>\n",
       "      <td>839.696325</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>36.041068</td>\n",
       "      <td>1298.958565</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.777550</td>\n",
       "      <td>2005.034018</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>79.123888</td>\n",
       "      <td>6260.589612</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           DEDUC1         AGE        AGESQ      WHITEH       MALEH  \\\n",
       "count  183.000000  183.000000   183.000000  183.000000  183.000000   \n",
       "mean    -0.010929   38.694015  1666.242009    0.934426    0.459016   \n",
       "std      1.881048   13.036251  1181.710178    0.248215    0.499685   \n",
       "min     -7.000000   18.781656   352.750617    0.000000    0.000000   \n",
       "25%     -1.000000   28.977413   839.696325    1.000000    0.000000   \n",
       "50%      0.000000   36.041068  1298.958565    1.000000    0.000000   \n",
       "75%      0.000000   44.777550  2005.034018    1.000000    1.000000   \n",
       "max      7.000000   79.123888  6260.589612    1.000000    1.000000   \n",
       "\n",
       "            EDUCH      WHITEL       MALEL       EDUCL      DEDUC2    DMARRIED  \\\n",
       "count  183.000000  183.000000  183.000000  183.000000  183.000000  183.000000   \n",
       "mean    13.950820    0.939891    0.459016   13.961749   -0.021858   -0.016393   \n",
       "std      2.332943    0.238341    0.499685    2.204805    1.886785    0.507909   \n",
       "min      8.000000    0.000000    0.000000    8.000000   -6.000000   -1.000000   \n",
       "25%     12.000000    1.000000    0.000000   12.000000   -1.000000    0.000000   \n",
       "50%     13.000000    1.000000    0.000000   14.000000    0.000000    0.000000   \n",
       "75%     16.000000    1.000000    1.000000   16.000000    0.000000    0.000000   \n",
       "max     20.000000    1.000000    1.000000   20.000000    7.000000    1.000000   \n",
       "\n",
       "           DUNCOV  \n",
       "count  183.000000  \n",
       "mean     0.021858  \n",
       "std      0.491200  \n",
       "min     -1.000000  \n",
       "25%      0.000000  \n",
       "50%      0.000000  \n",
       "75%      0.000000  \n",
       "max      1.000000  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 183 entries, 0 to 182\n",
      "Data columns (total 16 columns):\n",
      "DLHRWAGE    183 non-null object\n",
      "DEDUC1      183 non-null int64\n",
      "AGE         183 non-null float64\n",
      "AGESQ       183 non-null float64\n",
      "HRWAGEH     183 non-null object\n",
      "WHITEH      183 non-null int64\n",
      "MALEH       183 non-null int64\n",
      "EDUCH       183 non-null int64\n",
      "HRWAGEL     183 non-null object\n",
      "WHITEL      183 non-null int64\n",
      "MALEL       183 non-null int64\n",
      "EDUCL       183 non-null int64\n",
      "DEDUC2      183 non-null int64\n",
      "DTEN        183 non-null object\n",
      "DMARRIED    183 non-null int64\n",
      "DUNCOV      183 non-null int64\n",
      "dtypes: float64(2), int64(10), object(4)\n",
      "memory usage: 23.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1     -1\n",
       "2      7\n",
       "3      0\n",
       "4      0\n",
       "5      2\n",
       "6     -2\n",
       "7     -1\n",
       "8     -2\n",
       "9      0\n",
       "10    -1\n",
       "11     0\n",
       "12     4\n",
       "13    -2\n",
       "14     2\n",
       "15     4\n",
       "16     0\n",
       "17     1\n",
       "18     2\n",
       "19     1\n",
       "20     0\n",
       "21     1\n",
       "22     3\n",
       "23     0\n",
       "24     1\n",
       "25     0\n",
       "26     0\n",
       "27     2\n",
       "28     0\n",
       "29    -5\n",
       "      ..\n",
       "153    0\n",
       "154   -7\n",
       "155    2\n",
       "156    1\n",
       "157    0\n",
       "158    0\n",
       "159    1\n",
       "160    0\n",
       "161   -1\n",
       "162   -1\n",
       "163    0\n",
       "164   -4\n",
       "165    1\n",
       "166   -1\n",
       "167   -1\n",
       "168    0\n",
       "169    0\n",
       "170    0\n",
       "171    0\n",
       "172    4\n",
       "173    0\n",
       "174    2\n",
       "175    2\n",
       "176    0\n",
       "177   -1\n",
       "178    0\n",
       "179    0\n",
       "180    2\n",
       "181   -2\n",
       "182    0\n",
       "Name: DEDUC1, Length: 183, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"DEDUC1\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DLHRWAGE    0.2593466\n",
       "DEDUC1              0\n",
       "AGE           33.2512\n",
       "AGESQ         1105.64\n",
       "HRWAGEH         11.25\n",
       "WHITEH              1\n",
       "MALEH               0\n",
       "EDUCH              16\n",
       "HRWAGEL          8.68\n",
       "WHITEL              1\n",
       "MALEL               0\n",
       "EDUCL              16\n",
       "DEDUC2              0\n",
       "DTEN            1.333\n",
       "DMARRIED            0\n",
       "DUNCOV              0\n",
       "Name: 0, dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'.'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[5,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.917'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[4,\"DTEN\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'the label [-1] is not in the [index]'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_key\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1789\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontains\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1790\u001b[0;31m                     \u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1791\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36merror\u001b[0;34m()\u001b[0m\n\u001b[1;32m   1784\u001b[0m                                .format(key=key,\n\u001b[0;32m-> 1785\u001b[0;31m                                        axis=self.obj._get_axis_name(axis)))\n\u001b[0m\u001b[1;32m   1786\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'the label [-1] is not in the [index]'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-26-9ffe73c4f106>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"HRWAGEL\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1470\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    868\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    869\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 870\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    871\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    996\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    997\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_label_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 998\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    999\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1000\u001b[0m                 \u001b[0;31m# we have yielded a scalar ?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1909\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1910\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1911\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1912\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_key\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1796\u001b[0m                 \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1797\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1798\u001b[0;31m                 \u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1799\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1800\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36merror\u001b[0;34m()\u001b[0m\n\u001b[1;32m   1783\u001b[0m                 raise KeyError(u\"the label [{key}] is not in the [{axis}]\"\n\u001b[1;32m   1784\u001b[0m                                .format(key=key,\n\u001b[0;32m-> 1785\u001b[0;31m                                        axis=self.obj._get_axis_name(axis)))\n\u001b[0m\u001b[1;32m   1786\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1787\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'the label [-1] is not in the [index]'"
     ]
    }
   ],
   "source": [
    "df.loc[-1,\"HRWAGEL\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'14.85'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"HRWAGEL\"].iloc[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DLHRWAGE</th>\n",
       "      <th>DEDUC1</th>\n",
       "      <th>AGE</th>\n",
       "      <th>AGESQ</th>\n",
       "      <th>HRWAGEH</th>\n",
       "      <th>WHITEH</th>\n",
       "      <th>MALEH</th>\n",
       "      <th>EDUCH</th>\n",
       "      <th>HRWAGEL</th>\n",
       "      <th>WHITEL</th>\n",
       "      <th>MALEL</th>\n",
       "      <th>EDUCL</th>\n",
       "      <th>DEDUC2</th>\n",
       "      <th>DTEN</th>\n",
       "      <th>DMARRIED</th>\n",
       "      <th>DUNCOV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.2593466</td>\n",
       "      <td>0</td>\n",
       "      <td>33.251198</td>\n",
       "      <td>1105.642156</td>\n",
       "      <td>11.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>8.68</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1.333</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>.</td>\n",
       "      <td>-1</td>\n",
       "      <td>54.053388</td>\n",
       "      <td>2921.768764</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>7.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.721318058</td>\n",
       "      <td>7</td>\n",
       "      <td>43.570157</td>\n",
       "      <td>1898.358618</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>8.75</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.011581964</td>\n",
       "      <td>0</td>\n",
       "      <td>30.967830</td>\n",
       "      <td>959.006511</td>\n",
       "      <td>16.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>16.31</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.560984677</td>\n",
       "      <td>0</td>\n",
       "      <td>34.633812</td>\n",
       "      <td>1199.500965</td>\n",
       "      <td>9.6154</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>16.85</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>2.917</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>.</td>\n",
       "      <td>2</td>\n",
       "      <td>71.603012</td>\n",
       "      <td>5126.991275</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>-2</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.523260216</td>\n",
       "      <td>-2</td>\n",
       "      <td>34.978782</td>\n",
       "      <td>1223.515166</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>7.63</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>-2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>.</td>\n",
       "      <td>-1</td>\n",
       "      <td>61.451061</td>\n",
       "      <td>3776.232888</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>-2</td>\n",
       "      <td>25.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-0.223143551</td>\n",
       "      <td>-2</td>\n",
       "      <td>29.338809</td>\n",
       "      <td>860.765716</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-0.470003629</td>\n",
       "      <td>0</td>\n",
       "      <td>47.605749</td>\n",
       "      <td>2266.307384</td>\n",
       "      <td>6.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.051751065</td>\n",
       "      <td>-1</td>\n",
       "      <td>51.901437</td>\n",
       "      <td>2693.759201</td>\n",
       "      <td>17.25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>16.38</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>-2</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.287682073</td>\n",
       "      <td>0</td>\n",
       "      <td>36.076660</td>\n",
       "      <td>1301.525384</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>.</td>\n",
       "      <td>4</td>\n",
       "      <td>32.082136</td>\n",
       "      <td>1029.263420</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>31.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>-9.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>-0.470003629</td>\n",
       "      <td>-2</td>\n",
       "      <td>48.120465</td>\n",
       "      <td>2315.579194</td>\n",
       "      <td>15.625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>-3</td>\n",
       "      <td>-7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.305601229</td>\n",
       "      <td>2</td>\n",
       "      <td>33.954825</td>\n",
       "      <td>1152.930172</td>\n",
       "      <td>9.76</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>7.19</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>.</td>\n",
       "      <td>4</td>\n",
       "      <td>36.041068</td>\n",
       "      <td>1298.958565</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>.</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>-0.336472237</td>\n",
       "      <td>0</td>\n",
       "      <td>27.175907</td>\n",
       "      <td>738.529917</td>\n",
       "      <td>1.785714286</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0.417</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>24.544832</td>\n",
       "      <td>602.448793</td>\n",
       "      <td>5.25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.628608659</td>\n",
       "      <td>2</td>\n",
       "      <td>39.340178</td>\n",
       "      <td>1547.649602</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>-2</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.321583624</td>\n",
       "      <td>1</td>\n",
       "      <td>38.532512</td>\n",
       "      <td>1484.754479</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>10.875</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>24.657084</td>\n",
       "      <td>607.971801</td>\n",
       "      <td>8.7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>-0.378653851</td>\n",
       "      <td>1</td>\n",
       "      <td>23.682409</td>\n",
       "      <td>560.856511</td>\n",
       "      <td>11.41304348</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>16.66666667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>-0.078555719</td>\n",
       "      <td>3</td>\n",
       "      <td>35.663244</td>\n",
       "      <td>1271.866998</td>\n",
       "      <td>13.46</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>14.56</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>-0.3254224</td>\n",
       "      <td>0</td>\n",
       "      <td>21.349760</td>\n",
       "      <td>455.812271</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.083</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>28.900753</td>\n",
       "      <td>835.253519</td>\n",
       "      <td>8.583333333</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>30.006845</td>\n",
       "      <td>900.410724</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>-0.494696242</td>\n",
       "      <td>0</td>\n",
       "      <td>33.639973</td>\n",
       "      <td>1131.647758</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-6.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.497032302</td>\n",
       "      <td>2</td>\n",
       "      <td>24.640657</td>\n",
       "      <td>607.161982</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>7.3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>-2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0.167054085</td>\n",
       "      <td>0</td>\n",
       "      <td>46.365503</td>\n",
       "      <td>2149.759876</td>\n",
       "      <td>7.15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6.05</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>-1.446918983</td>\n",
       "      <td>-5</td>\n",
       "      <td>43.854894</td>\n",
       "      <td>1923.251720</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>-6</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>0.519875459</td>\n",
       "      <td>0</td>\n",
       "      <td>50.050650</td>\n",
       "      <td>2505.067589</td>\n",
       "      <td>11.5625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6.875</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>0.049122045</td>\n",
       "      <td>0</td>\n",
       "      <td>25.941136</td>\n",
       "      <td>672.942548</td>\n",
       "      <td>16.42857143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>15.64106667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>0.619039208</td>\n",
       "      <td>-7</td>\n",
       "      <td>31.208761</td>\n",
       "      <td>973.986771</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>7</td>\n",
       "      <td>-7</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>0.287682073</td>\n",
       "      <td>2</td>\n",
       "      <td>26.926762</td>\n",
       "      <td>725.050538</td>\n",
       "      <td>13.33333333</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>-2.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>1.32175584</td>\n",
       "      <td>1</td>\n",
       "      <td>25.541410</td>\n",
       "      <td>652.363624</td>\n",
       "      <td>6.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1.666666667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>52.550308</td>\n",
       "      <td>2761.534872</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>5.952380953</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40.873374</td>\n",
       "      <td>1670.632735</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>33.251198</td>\n",
       "      <td>1105.642156</td>\n",
       "      <td>9.6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>-0.057158414</td>\n",
       "      <td>0</td>\n",
       "      <td>48.249144</td>\n",
       "      <td>2327.979937</td>\n",
       "      <td>4.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.993</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>-0.732367894</td>\n",
       "      <td>-1</td>\n",
       "      <td>37.281314</td>\n",
       "      <td>1389.896386</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>10.4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>-1</td>\n",
       "      <td>-7.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>.</td>\n",
       "      <td>-1</td>\n",
       "      <td>70.600958</td>\n",
       "      <td>4984.495306</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>6.868095238</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163</th>\n",
       "      <td>-0.322773392</td>\n",
       "      <td>0</td>\n",
       "      <td>29.054073</td>\n",
       "      <td>844.139132</td>\n",
       "      <td>10.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>14.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>-3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>-0.894651557</td>\n",
       "      <td>-4</td>\n",
       "      <td>30.225873</td>\n",
       "      <td>913.603380</td>\n",
       "      <td>5.45</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>13.33333333</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>-4</td>\n",
       "      <td>2.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>52.985626</td>\n",
       "      <td>2807.476593</td>\n",
       "      <td>14.28571429</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>-0.615957542</td>\n",
       "      <td>-1</td>\n",
       "      <td>37.374401</td>\n",
       "      <td>1396.845857</td>\n",
       "      <td>9.722222222</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>-6</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>0.287682073</td>\n",
       "      <td>-1</td>\n",
       "      <td>21.927447</td>\n",
       "      <td>480.812930</td>\n",
       "      <td>6.666666667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>1.75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>0.343771539</td>\n",
       "      <td>0</td>\n",
       "      <td>23.969884</td>\n",
       "      <td>574.555322</td>\n",
       "      <td>10.57692308</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0.038</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>0.284451052</td>\n",
       "      <td>0</td>\n",
       "      <td>36.372348</td>\n",
       "      <td>1322.947678</td>\n",
       "      <td>10.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>7.75</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>22.299795</td>\n",
       "      <td>497.280842</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>0.022927505</td>\n",
       "      <td>0</td>\n",
       "      <td>36.944559</td>\n",
       "      <td>1364.900404</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>14.66</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>0.518260602</td>\n",
       "      <td>4</td>\n",
       "      <td>43.200548</td>\n",
       "      <td>1866.287310</td>\n",
       "      <td>11.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>6.7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>14.67</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>0.310154928</td>\n",
       "      <td>2</td>\n",
       "      <td>36.621492</td>\n",
       "      <td>1341.133686</td>\n",
       "      <td>13.63636364</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>0.372250629</td>\n",
       "      <td>2</td>\n",
       "      <td>45.612594</td>\n",
       "      <td>2080.508742</td>\n",
       "      <td>22.32285714</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>15.3845</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>-4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>0.093011748</td>\n",
       "      <td>0</td>\n",
       "      <td>29.390828</td>\n",
       "      <td>863.820782</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>4.100322581</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>-0.087016892</td>\n",
       "      <td>-1</td>\n",
       "      <td>38.770705</td>\n",
       "      <td>1503.167566</td>\n",
       "      <td>21.1538</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>23.077</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>0.109904862</td>\n",
       "      <td>0</td>\n",
       "      <td>45.555099</td>\n",
       "      <td>2075.267067</td>\n",
       "      <td>20.60625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>18.46153846</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-7</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>26.376454</td>\n",
       "      <td>695.717351</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>19.65</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>0.850332764</td>\n",
       "      <td>2</td>\n",
       "      <td>40.312115</td>\n",
       "      <td>1625.066615</td>\n",
       "      <td>5.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>2.35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>-0.729514825</td>\n",
       "      <td>-2</td>\n",
       "      <td>28.413415</td>\n",
       "      <td>807.322179</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>15.55555556</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>-0.500775288</td>\n",
       "      <td>0</td>\n",
       "      <td>28.413415</td>\n",
       "      <td>807.322179</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>14.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>-2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>180 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         DLHRWAGE  DEDUC1        AGE        AGESQ      HRWAGEH  WHITEH  MALEH  \\\n",
       "0       0.2593466       0  33.251198  1105.642156        11.25       1      0   \n",
       "1               .      -1  54.053388  2921.768764            .       1      0   \n",
       "2     0.721318058       7  43.570157  1898.358618           18       1      0   \n",
       "3     0.011581964       0  30.967830   959.006511         16.5       1      1   \n",
       "4    -0.560984677       0  34.633812  1199.500965       9.6154       1      1   \n",
       "5               .       2  71.603012  5126.991275            .       1      0   \n",
       "6     1.523260216      -2  34.978782  1223.515166           35       1      0   \n",
       "7               .      -1  61.451061  3776.232888           35       1      0   \n",
       "8    -0.223143551      -2  29.338809   860.765716           12       1      1   \n",
       "9    -0.470003629       0  47.605749  2266.307384         6.25       1      0   \n",
       "10    0.051751065      -1  51.901437  2693.759201        17.25       1      1   \n",
       "11    0.287682073       0  36.076660  1301.525384           16       1      1   \n",
       "12              .       4  32.082136  1029.263420            .       1      0   \n",
       "13   -0.470003629      -2  48.120465  2315.579194       15.625       1      0   \n",
       "14    0.305601229       2  33.954825  1152.930172         9.76       1      0   \n",
       "15              .       4  36.041068  1298.958565            .       1      0   \n",
       "16   -0.336472237       0  27.175907   738.529917  1.785714286       1      0   \n",
       "17              .       1  24.544832   602.448793         5.25       1      1   \n",
       "18    0.628608659       2  39.340178  1547.649602           15       1      1   \n",
       "19    0.321583624       1  38.532512  1484.754479           15       1      1   \n",
       "20              .       0  24.657084   607.971801          8.7       1      0   \n",
       "21   -0.378653851       1  23.682409   560.856511  11.41304348       1      0   \n",
       "22   -0.078555719       3  35.663244  1271.866998        13.46       1      0   \n",
       "23     -0.3254224       0  21.349760   455.812271          6.5       0      1   \n",
       "24              .       1  28.900753   835.253519  8.583333333       1      1   \n",
       "25              .       0  30.006845   900.410724           13       1      1   \n",
       "26   -0.494696242       0  33.639973  1131.647758           10       1      0   \n",
       "27    0.497032302       2  24.640657   607.161982           12       1      0   \n",
       "28    0.167054085       0  46.365503  2149.759876         7.15       1      0   \n",
       "29   -1.446918983      -5  43.854894  1923.251720            8       1      1   \n",
       "..            ...     ...        ...          ...          ...     ...    ...   \n",
       "152   0.519875459       0  50.050650  2505.067589      11.5625       1      0   \n",
       "153   0.049122045       0  25.941136   672.942548  16.42857143       1      0   \n",
       "154   0.619039208      -7  31.208761   973.986771           13       0      0   \n",
       "155   0.287682073       2  26.926762   725.050538  13.33333333       1      1   \n",
       "156    1.32175584       1  25.541410   652.363624         6.25       1      0   \n",
       "157             .       0  52.550308  2761.534872            .       1      0   \n",
       "158             0       0  40.873374  1670.632735           20       0      1   \n",
       "159             .       1  33.251198  1105.642156          9.6       1      0   \n",
       "160  -0.057158414       0  48.249144  2327.979937         4.25       1      0   \n",
       "161  -0.732367894      -1  37.281314  1389.896386            5       1      0   \n",
       "162             .      -1  70.600958  4984.495306            .       1      1   \n",
       "163  -0.322773392       0  29.054073   844.139132         10.5       1      1   \n",
       "164  -0.894651557      -4  30.225873   913.603380         5.45       1      0   \n",
       "165             .       1  52.985626  2807.476593  14.28571429       1      1   \n",
       "166  -0.615957542      -1  37.374401  1396.845857  9.722222222       1      1   \n",
       "167   0.287682073      -1  21.927447   480.812930  6.666666667       1      0   \n",
       "168   0.343771539       0  23.969884   574.555322  10.57692308       1      0   \n",
       "169   0.284451052       0  36.372348  1322.947678         10.3       1      1   \n",
       "170             .       0  22.299795   497.280842            .       1      0   \n",
       "171   0.022927505       0  36.944559  1364.900404           15       1      0   \n",
       "172   0.518260602       4  43.200548  1866.287310        11.25       1      0   \n",
       "174   0.310154928       2  36.621492  1341.133686  13.63636364       1      0   \n",
       "175   0.372250629       2  45.612594  2080.508742  22.32285714       1      0   \n",
       "176   0.093011748       0  29.390828   863.820782          4.5       1      0   \n",
       "177  -0.087016892      -1  38.770705  1503.167566      21.1538       1      0   \n",
       "178   0.109904862       0  45.555099  2075.267067     20.60625       1      0   \n",
       "179             .       0  26.376454   695.717351            .       1      1   \n",
       "180   0.850332764       2  40.312115  1625.066615          5.5       1      0   \n",
       "181  -0.729514825      -2  28.413415   807.322179          7.5       1      0   \n",
       "182  -0.500775288       0  28.413415   807.322179            9       1      0   \n",
       "\n",
       "     EDUCH      HRWAGEL  WHITEL  MALEL  EDUCL  DEDUC2    DTEN  DMARRIED  \\\n",
       "0       16         8.68       1      0     16       0   1.333         0   \n",
       "1        9         7.85       1      0     10       1       8         1   \n",
       "2       19         8.75       1      0     12       4       3        -1   \n",
       "3       12        16.31       1      1     12       0      -2         0   \n",
       "4       14        16.85       1      1     14       1   2.917         0   \n",
       "5       16            .       1      0     14      -2      24         1   \n",
       "6       13         7.63       1      0     15      -2       3         1   \n",
       "7       13            .       1      0     14      -2    25.5         0   \n",
       "8       12           15       1      1     14       1       1        -1   \n",
       "9       12           10       1      0     12       0      -5         0   \n",
       "10      12        16.38       1      1     13      -2       9         0   \n",
       "11      12           12       1      1     12       0       5         0   \n",
       "12      16        31.25       1      0     12       4    -9.5         0   \n",
       "13      17           25       1      0     19      -3      -7         0   \n",
       "14      14         7.19       1      0     12       2       .         0   \n",
       "15      18            .       1      0     14       4       .        -1   \n",
       "16      16          2.5       1      0     16       0   0.417         0   \n",
       "17      13            .       1      1     12       0       .         1   \n",
       "18      14            8       1      1     12      -2      15         1   \n",
       "19      13       10.875       1      1     12      -1       0         0   \n",
       "20      12            .       1      0     12       0      -2         0   \n",
       "21      17  16.66666667       1      0     16       1    -0.5         0   \n",
       "22      15        14.56       1      0     12       2       4         0   \n",
       "23      14            9       0      1     14       0  -0.083         0   \n",
       "24      15            .       1      1     14      -1       0         0   \n",
       "25      12            .       1      1     12       0       0         0   \n",
       "26      12         16.4       1      0     12       0    -6.5        -1   \n",
       "27      16          7.3       1      0     14      -2      -1         0   \n",
       "28      12         6.05       1      0     12       0       1         0   \n",
       "29      15           34       1      1     20      -6      -2         0   \n",
       "..     ...          ...     ...    ...    ...     ...     ...       ...   \n",
       "152     12        6.875       1      0     12       0     2.5         0   \n",
       "153     12  15.64106667       1      0     12       0       0         0   \n",
       "154      8            7       1      0     15       7      -7         0   \n",
       "155     16           10       1      1     14       2    -2.5        -1   \n",
       "156     13  1.666666667       1      0     12       1       0         0   \n",
       "157     12  5.952380953       1      0     12       0       0         0   \n",
       "158     12           20       0      1     12       0     4.5        -1   \n",
       "159     13            .       1      0     12       0      -2         0   \n",
       "160     12          4.5       1      0     12       0  -2.993         0   \n",
       "161     12         10.4       1      0     13      -1    -7.5        -1   \n",
       "162     12  6.868095238       1      1     13       0      13         0   \n",
       "163     13         14.5       1      1     13       0    -3.5         0   \n",
       "164     12  13.33333333       1      0     16      -4     2.5        -1   \n",
       "165     13            .       1      1     12       0       3         0   \n",
       "166     12           18       1      1     13       0      -6         0   \n",
       "167     12            5       1      0     13       0    1.75         0   \n",
       "168     16          7.5       1      0     16       0   0.038         0   \n",
       "169     18         7.75       1      1     18       0       2         0   \n",
       "170     12           20       1      0     12       0       0         0   \n",
       "171     16        14.66       1      0     16       0     1.5         1   \n",
       "172     14          6.7       1      0     10       3   14.67         1   \n",
       "174     14           10       1      0     12       2       1         0   \n",
       "175     14      15.3845       1      0     12       2      -4         1   \n",
       "176     12  4.100322581       1      0     12       0     3.5         1   \n",
       "177     13       23.077       1      0     14      -1       2         1   \n",
       "178     12  18.46153846       1      0     12       0      -7        -1   \n",
       "179     16        19.65       1      1     16       0    -0.5         0   \n",
       "180     14         2.35       1      0     12       2       2         0   \n",
       "181     14  15.55555556       1      0     16      -2      -2         0   \n",
       "182     16        14.85       1      0     16      -2       3         0   \n",
       "\n",
       "     DUNCOV  \n",
       "0         0  \n",
       "1         0  \n",
       "2         0  \n",
       "3         1  \n",
       "4        -1  \n",
       "5         0  \n",
       "6         0  \n",
       "7         0  \n",
       "8         0  \n",
       "9         0  \n",
       "10        0  \n",
       "11        0  \n",
       "12        0  \n",
       "13        0  \n",
       "14       -1  \n",
       "15        0  \n",
       "16        0  \n",
       "17        0  \n",
       "18        1  \n",
       "19        0  \n",
       "20        1  \n",
       "21        1  \n",
       "22       -1  \n",
       "23        0  \n",
       "24        0  \n",
       "25        0  \n",
       "26       -1  \n",
       "27       -1  \n",
       "28        0  \n",
       "29        0  \n",
       "..      ...  \n",
       "152      -1  \n",
       "153       0  \n",
       "154      -1  \n",
       "155       0  \n",
       "156       0  \n",
       "157       0  \n",
       "158       0  \n",
       "159       0  \n",
       "160       0  \n",
       "161       0  \n",
       "162      -1  \n",
       "163       0  \n",
       "164       1  \n",
       "165       0  \n",
       "166      -1  \n",
       "167       0  \n",
       "168       0  \n",
       "169       0  \n",
       "170       0  \n",
       "171       0  \n",
       "172       0  \n",
       "174       0  \n",
       "175       0  \n",
       "176       0  \n",
       "177       0  \n",
       "178       0  \n",
       "179       0  \n",
       "180       0  \n",
       "181       0  \n",
       "182       0  \n",
       "\n",
       "[180 rows x 16 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"AGE\"]>20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DLHRWAGE</th>\n",
       "      <th>DEDUC1</th>\n",
       "      <th>AGE</th>\n",
       "      <th>AGESQ</th>\n",
       "      <th>HRWAGEH</th>\n",
       "      <th>WHITEH</th>\n",
       "      <th>MALEH</th>\n",
       "      <th>EDUCH</th>\n",
       "      <th>HRWAGEL</th>\n",
       "      <th>WHITEL</th>\n",
       "      <th>MALEL</th>\n",
       "      <th>EDUCL</th>\n",
       "      <th>DEDUC2</th>\n",
       "      <th>DTEN</th>\n",
       "      <th>DMARRIED</th>\n",
       "      <th>DUNCOV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.2593466</td>\n",
       "      <td>0</td>\n",
       "      <td>33.251198</td>\n",
       "      <td>1105.642156</td>\n",
       "      <td>11.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>8.68</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1.333</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>.</td>\n",
       "      <td>-1</td>\n",
       "      <td>54.053388</td>\n",
       "      <td>2921.768764</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>7.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.721318058</td>\n",
       "      <td>7</td>\n",
       "      <td>43.570157</td>\n",
       "      <td>1898.358618</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>8.75</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.011581964</td>\n",
       "      <td>0</td>\n",
       "      <td>30.967830</td>\n",
       "      <td>959.006511</td>\n",
       "      <td>16.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>16.31</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.560984677</td>\n",
       "      <td>0</td>\n",
       "      <td>34.633812</td>\n",
       "      <td>1199.500965</td>\n",
       "      <td>9.6154</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>16.85</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>2.917</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>.</td>\n",
       "      <td>2</td>\n",
       "      <td>71.603012</td>\n",
       "      <td>5126.991275</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>-2</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.523260216</td>\n",
       "      <td>-2</td>\n",
       "      <td>34.978782</td>\n",
       "      <td>1223.515166</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>7.63</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>-2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>.</td>\n",
       "      <td>-1</td>\n",
       "      <td>61.451061</td>\n",
       "      <td>3776.232888</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>-2</td>\n",
       "      <td>25.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-0.223143551</td>\n",
       "      <td>-2</td>\n",
       "      <td>29.338809</td>\n",
       "      <td>860.765716</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-0.470003629</td>\n",
       "      <td>0</td>\n",
       "      <td>47.605749</td>\n",
       "      <td>2266.307384</td>\n",
       "      <td>6.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.051751065</td>\n",
       "      <td>-1</td>\n",
       "      <td>51.901437</td>\n",
       "      <td>2693.759201</td>\n",
       "      <td>17.25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>16.38</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>-2</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.287682073</td>\n",
       "      <td>0</td>\n",
       "      <td>36.076660</td>\n",
       "      <td>1301.525384</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>.</td>\n",
       "      <td>4</td>\n",
       "      <td>32.082136</td>\n",
       "      <td>1029.263420</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>31.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>-9.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>-0.470003629</td>\n",
       "      <td>-2</td>\n",
       "      <td>48.120465</td>\n",
       "      <td>2315.579194</td>\n",
       "      <td>15.625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>-3</td>\n",
       "      <td>-7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.305601229</td>\n",
       "      <td>2</td>\n",
       "      <td>33.954825</td>\n",
       "      <td>1152.930172</td>\n",
       "      <td>9.76</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>7.19</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>.</td>\n",
       "      <td>4</td>\n",
       "      <td>36.041068</td>\n",
       "      <td>1298.958565</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>.</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>-0.336472237</td>\n",
       "      <td>0</td>\n",
       "      <td>27.175907</td>\n",
       "      <td>738.529917</td>\n",
       "      <td>1.785714286</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0.417</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>24.544832</td>\n",
       "      <td>602.448793</td>\n",
       "      <td>5.25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.628608659</td>\n",
       "      <td>2</td>\n",
       "      <td>39.340178</td>\n",
       "      <td>1547.649602</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>-2</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.321583624</td>\n",
       "      <td>1</td>\n",
       "      <td>38.532512</td>\n",
       "      <td>1484.754479</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>10.875</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>24.657084</td>\n",
       "      <td>607.971801</td>\n",
       "      <td>8.7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>-0.378653851</td>\n",
       "      <td>1</td>\n",
       "      <td>23.682409</td>\n",
       "      <td>560.856511</td>\n",
       "      <td>11.41304348</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>16.66666667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>-0.078555719</td>\n",
       "      <td>3</td>\n",
       "      <td>35.663244</td>\n",
       "      <td>1271.866998</td>\n",
       "      <td>13.46</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>14.56</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>28.900753</td>\n",
       "      <td>835.253519</td>\n",
       "      <td>8.583333333</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>30.006845</td>\n",
       "      <td>900.410724</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>-0.494696242</td>\n",
       "      <td>0</td>\n",
       "      <td>33.639973</td>\n",
       "      <td>1131.647758</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-6.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.497032302</td>\n",
       "      <td>2</td>\n",
       "      <td>24.640657</td>\n",
       "      <td>607.161982</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>7.3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>-2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0.167054085</td>\n",
       "      <td>0</td>\n",
       "      <td>46.365503</td>\n",
       "      <td>2149.759876</td>\n",
       "      <td>7.15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6.05</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>-1.446918983</td>\n",
       "      <td>-5</td>\n",
       "      <td>43.854894</td>\n",
       "      <td>1923.251720</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>-6</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1.504077397</td>\n",
       "      <td>0</td>\n",
       "      <td>24.117728</td>\n",
       "      <td>581.664784</td>\n",
       "      <td>22.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>0.133531393</td>\n",
       "      <td>0</td>\n",
       "      <td>28.153320</td>\n",
       "      <td>792.609407</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>8.75</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>0.519875459</td>\n",
       "      <td>0</td>\n",
       "      <td>50.050650</td>\n",
       "      <td>2505.067589</td>\n",
       "      <td>11.5625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6.875</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>0.049122045</td>\n",
       "      <td>0</td>\n",
       "      <td>25.941136</td>\n",
       "      <td>672.942548</td>\n",
       "      <td>16.42857143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>15.64106667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>0.619039208</td>\n",
       "      <td>-7</td>\n",
       "      <td>31.208761</td>\n",
       "      <td>973.986771</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>7</td>\n",
       "      <td>-7</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>0.287682073</td>\n",
       "      <td>2</td>\n",
       "      <td>26.926762</td>\n",
       "      <td>725.050538</td>\n",
       "      <td>13.33333333</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>-2.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>1.32175584</td>\n",
       "      <td>1</td>\n",
       "      <td>25.541410</td>\n",
       "      <td>652.363624</td>\n",
       "      <td>6.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1.666666667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>52.550308</td>\n",
       "      <td>2761.534872</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>5.952380953</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>33.251198</td>\n",
       "      <td>1105.642156</td>\n",
       "      <td>9.6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>-0.057158414</td>\n",
       "      <td>0</td>\n",
       "      <td>48.249144</td>\n",
       "      <td>2327.979937</td>\n",
       "      <td>4.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.993</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>-0.732367894</td>\n",
       "      <td>-1</td>\n",
       "      <td>37.281314</td>\n",
       "      <td>1389.896386</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>10.4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>-1</td>\n",
       "      <td>-7.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>.</td>\n",
       "      <td>-1</td>\n",
       "      <td>70.600958</td>\n",
       "      <td>4984.495306</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>6.868095238</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163</th>\n",
       "      <td>-0.322773392</td>\n",
       "      <td>0</td>\n",
       "      <td>29.054073</td>\n",
       "      <td>844.139132</td>\n",
       "      <td>10.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>14.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>-3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>-0.894651557</td>\n",
       "      <td>-4</td>\n",
       "      <td>30.225873</td>\n",
       "      <td>913.603380</td>\n",
       "      <td>5.45</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>13.33333333</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>-4</td>\n",
       "      <td>2.5</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>52.985626</td>\n",
       "      <td>2807.476593</td>\n",
       "      <td>14.28571429</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>-0.615957542</td>\n",
       "      <td>-1</td>\n",
       "      <td>37.374401</td>\n",
       "      <td>1396.845857</td>\n",
       "      <td>9.722222222</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>-6</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>0.287682073</td>\n",
       "      <td>-1</td>\n",
       "      <td>21.927447</td>\n",
       "      <td>480.812930</td>\n",
       "      <td>6.666666667</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>1.75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>0.343771539</td>\n",
       "      <td>0</td>\n",
       "      <td>23.969884</td>\n",
       "      <td>574.555322</td>\n",
       "      <td>10.57692308</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0.038</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>0.284451052</td>\n",
       "      <td>0</td>\n",
       "      <td>36.372348</td>\n",
       "      <td>1322.947678</td>\n",
       "      <td>10.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>7.75</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>22.299795</td>\n",
       "      <td>497.280842</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>0.022927505</td>\n",
       "      <td>0</td>\n",
       "      <td>36.944559</td>\n",
       "      <td>1364.900404</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>14.66</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>0.518260602</td>\n",
       "      <td>4</td>\n",
       "      <td>43.200548</td>\n",
       "      <td>1866.287310</td>\n",
       "      <td>11.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>6.7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>14.67</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>0.310154928</td>\n",
       "      <td>2</td>\n",
       "      <td>36.621492</td>\n",
       "      <td>1341.133686</td>\n",
       "      <td>13.63636364</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>0.372250629</td>\n",
       "      <td>2</td>\n",
       "      <td>45.612594</td>\n",
       "      <td>2080.508742</td>\n",
       "      <td>22.32285714</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>15.3845</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>-4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>0.093011748</td>\n",
       "      <td>0</td>\n",
       "      <td>29.390828</td>\n",
       "      <td>863.820782</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>4.100322581</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>-0.087016892</td>\n",
       "      <td>-1</td>\n",
       "      <td>38.770705</td>\n",
       "      <td>1503.167566</td>\n",
       "      <td>21.1538</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>23.077</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>0.109904862</td>\n",
       "      <td>0</td>\n",
       "      <td>45.555099</td>\n",
       "      <td>2075.267067</td>\n",
       "      <td>20.60625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>18.46153846</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>-7</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>.</td>\n",
       "      <td>0</td>\n",
       "      <td>26.376454</td>\n",
       "      <td>695.717351</td>\n",
       "      <td>.</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>19.65</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>0.850332764</td>\n",
       "      <td>2</td>\n",
       "      <td>40.312115</td>\n",
       "      <td>1625.066615</td>\n",
       "      <td>5.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>2.35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>-0.729514825</td>\n",
       "      <td>-2</td>\n",
       "      <td>28.413415</td>\n",
       "      <td>807.322179</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>15.55555556</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>-0.500775288</td>\n",
       "      <td>0</td>\n",
       "      <td>28.413415</td>\n",
       "      <td>807.322179</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>14.85</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>-2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>169 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         DLHRWAGE  DEDUC1        AGE        AGESQ      HRWAGEH  WHITEH  MALEH  \\\n",
       "0       0.2593466       0  33.251198  1105.642156        11.25       1      0   \n",
       "1               .      -1  54.053388  2921.768764            .       1      0   \n",
       "2     0.721318058       7  43.570157  1898.358618           18       1      0   \n",
       "3     0.011581964       0  30.967830   959.006511         16.5       1      1   \n",
       "4    -0.560984677       0  34.633812  1199.500965       9.6154       1      1   \n",
       "5               .       2  71.603012  5126.991275            .       1      0   \n",
       "6     1.523260216      -2  34.978782  1223.515166           35       1      0   \n",
       "7               .      -1  61.451061  3776.232888           35       1      0   \n",
       "8    -0.223143551      -2  29.338809   860.765716           12       1      1   \n",
       "9    -0.470003629       0  47.605749  2266.307384         6.25       1      0   \n",
       "10    0.051751065      -1  51.901437  2693.759201        17.25       1      1   \n",
       "11    0.287682073       0  36.076660  1301.525384           16       1      1   \n",
       "12              .       4  32.082136  1029.263420            .       1      0   \n",
       "13   -0.470003629      -2  48.120465  2315.579194       15.625       1      0   \n",
       "14    0.305601229       2  33.954825  1152.930172         9.76       1      0   \n",
       "15              .       4  36.041068  1298.958565            .       1      0   \n",
       "16   -0.336472237       0  27.175907   738.529917  1.785714286       1      0   \n",
       "17              .       1  24.544832   602.448793         5.25       1      1   \n",
       "18    0.628608659       2  39.340178  1547.649602           15       1      1   \n",
       "19    0.321583624       1  38.532512  1484.754479           15       1      1   \n",
       "20              .       0  24.657084   607.971801          8.7       1      0   \n",
       "21   -0.378653851       1  23.682409   560.856511  11.41304348       1      0   \n",
       "22   -0.078555719       3  35.663244  1271.866998        13.46       1      0   \n",
       "24              .       1  28.900753   835.253519  8.583333333       1      1   \n",
       "25              .       0  30.006845   900.410724           13       1      1   \n",
       "26   -0.494696242       0  33.639973  1131.647758           10       1      0   \n",
       "27    0.497032302       2  24.640657   607.161982           12       1      0   \n",
       "28    0.167054085       0  46.365503  2149.759876         7.15       1      0   \n",
       "29   -1.446918983      -5  43.854894  1923.251720            8       1      1   \n",
       "31    1.504077397       0  24.117728   581.664784         22.5       1      1   \n",
       "..            ...     ...        ...          ...          ...     ...    ...   \n",
       "151   0.133531393       0  28.153320   792.609407           10       1      0   \n",
       "152   0.519875459       0  50.050650  2505.067589      11.5625       1      0   \n",
       "153   0.049122045       0  25.941136   672.942548  16.42857143       1      0   \n",
       "154   0.619039208      -7  31.208761   973.986771           13       0      0   \n",
       "155   0.287682073       2  26.926762   725.050538  13.33333333       1      1   \n",
       "156    1.32175584       1  25.541410   652.363624         6.25       1      0   \n",
       "157             .       0  52.550308  2761.534872            .       1      0   \n",
       "159             .       1  33.251198  1105.642156          9.6       1      0   \n",
       "160  -0.057158414       0  48.249144  2327.979937         4.25       1      0   \n",
       "161  -0.732367894      -1  37.281314  1389.896386            5       1      0   \n",
       "162             .      -1  70.600958  4984.495306            .       1      1   \n",
       "163  -0.322773392       0  29.054073   844.139132         10.5       1      1   \n",
       "164  -0.894651557      -4  30.225873   913.603380         5.45       1      0   \n",
       "165             .       1  52.985626  2807.476593  14.28571429       1      1   \n",
       "166  -0.615957542      -1  37.374401  1396.845857  9.722222222       1      1   \n",
       "167   0.287682073      -1  21.927447   480.812930  6.666666667       1      0   \n",
       "168   0.343771539       0  23.969884   574.555322  10.57692308       1      0   \n",
       "169   0.284451052       0  36.372348  1322.947678         10.3       1      1   \n",
       "170             .       0  22.299795   497.280842            .       1      0   \n",
       "171   0.022927505       0  36.944559  1364.900404           15       1      0   \n",
       "172   0.518260602       4  43.200548  1866.287310        11.25       1      0   \n",
       "174   0.310154928       2  36.621492  1341.133686  13.63636364       1      0   \n",
       "175   0.372250629       2  45.612594  2080.508742  22.32285714       1      0   \n",
       "176   0.093011748       0  29.390828   863.820782          4.5       1      0   \n",
       "177  -0.087016892      -1  38.770705  1503.167566      21.1538       1      0   \n",
       "178   0.109904862       0  45.555099  2075.267067     20.60625       1      0   \n",
       "179             .       0  26.376454   695.717351            .       1      1   \n",
       "180   0.850332764       2  40.312115  1625.066615          5.5       1      0   \n",
       "181  -0.729514825      -2  28.413415   807.322179          7.5       1      0   \n",
       "182  -0.500775288       0  28.413415   807.322179            9       1      0   \n",
       "\n",
       "     EDUCH      HRWAGEL  WHITEL  MALEL  EDUCL  DEDUC2    DTEN  DMARRIED  \\\n",
       "0       16         8.68       1      0     16       0   1.333         0   \n",
       "1        9         7.85       1      0     10       1       8         1   \n",
       "2       19         8.75       1      0     12       4       3        -1   \n",
       "3       12        16.31       1      1     12       0      -2         0   \n",
       "4       14        16.85       1      1     14       1   2.917         0   \n",
       "5       16            .       1      0     14      -2      24         1   \n",
       "6       13         7.63       1      0     15      -2       3         1   \n",
       "7       13            .       1      0     14      -2    25.5         0   \n",
       "8       12           15       1      1     14       1       1        -1   \n",
       "9       12           10       1      0     12       0      -5         0   \n",
       "10      12        16.38       1      1     13      -2       9         0   \n",
       "11      12           12       1      1     12       0       5         0   \n",
       "12      16        31.25       1      0     12       4    -9.5         0   \n",
       "13      17           25       1      0     19      -3      -7         0   \n",
       "14      14         7.19       1      0     12       2       .         0   \n",
       "15      18            .       1      0     14       4       .        -1   \n",
       "16      16          2.5       1      0     16       0   0.417         0   \n",
       "17      13            .       1      1     12       0       .         1   \n",
       "18      14            8       1      1     12      -2      15         1   \n",
       "19      13       10.875       1      1     12      -1       0         0   \n",
       "20      12            .       1      0     12       0      -2         0   \n",
       "21      17  16.66666667       1      0     16       1    -0.5         0   \n",
       "22      15        14.56       1      0     12       2       4         0   \n",
       "24      15            .       1      1     14      -1       0         0   \n",
       "25      12            .       1      1     12       0       0         0   \n",
       "26      12         16.4       1      0     12       0    -6.5        -1   \n",
       "27      16          7.3       1      0     14      -2      -1         0   \n",
       "28      12         6.05       1      0     12       0       1         0   \n",
       "29      15           34       1      1     20      -6      -2         0   \n",
       "31      16            5       1      1     16       0     1.5         0   \n",
       "..     ...          ...     ...    ...    ...     ...     ...       ...   \n",
       "151     15         8.75       1      0     15       1       1        -1   \n",
       "152     12        6.875       1      0     12       0     2.5         0   \n",
       "153     12  15.64106667       1      0     12       0       0         0   \n",
       "154      8            7       1      0     15       7      -7         0   \n",
       "155     16           10       1      1     14       2    -2.5        -1   \n",
       "156     13  1.666666667       1      0     12       1       0         0   \n",
       "157     12  5.952380953       1      0     12       0       0         0   \n",
       "159     13            .       1      0     12       0      -2         0   \n",
       "160     12          4.5       1      0     12       0  -2.993         0   \n",
       "161     12         10.4       1      0     13      -1    -7.5        -1   \n",
       "162     12  6.868095238       1      1     13       0      13         0   \n",
       "163     13         14.5       1      1     13       0    -3.5         0   \n",
       "164     12  13.33333333       1      0     16      -4     2.5        -1   \n",
       "165     13            .       1      1     12       0       3         0   \n",
       "166     12           18       1      1     13       0      -6         0   \n",
       "167     12            5       1      0     13       0    1.75         0   \n",
       "168     16          7.5       1      0     16       0   0.038         0   \n",
       "169     18         7.75       1      1     18       0       2         0   \n",
       "170     12           20       1      0     12       0       0         0   \n",
       "171     16        14.66       1      0     16       0     1.5         1   \n",
       "172     14          6.7       1      0     10       3   14.67         1   \n",
       "174     14           10       1      0     12       2       1         0   \n",
       "175     14      15.3845       1      0     12       2      -4         1   \n",
       "176     12  4.100322581       1      0     12       0     3.5         1   \n",
       "177     13       23.077       1      0     14      -1       2         1   \n",
       "178     12  18.46153846       1      0     12       0      -7        -1   \n",
       "179     16        19.65       1      1     16       0    -0.5         0   \n",
       "180     14         2.35       1      0     12       2       2         0   \n",
       "181     14  15.55555556       1      0     16      -2      -2         0   \n",
       "182     16        14.85       1      0     16      -2       3         0   \n",
       "\n",
       "     DUNCOV  \n",
       "0         0  \n",
       "1         0  \n",
       "2         0  \n",
       "3         1  \n",
       "4        -1  \n",
       "5         0  \n",
       "6         0  \n",
       "7         0  \n",
       "8         0  \n",
       "9         0  \n",
       "10        0  \n",
       "11        0  \n",
       "12        0  \n",
       "13        0  \n",
       "14       -1  \n",
       "15        0  \n",
       "16        0  \n",
       "17        0  \n",
       "18        1  \n",
       "19        0  \n",
       "20        1  \n",
       "21        1  \n",
       "22       -1  \n",
       "24        0  \n",
       "25        0  \n",
       "26       -1  \n",
       "27       -1  \n",
       "28        0  \n",
       "29        0  \n",
       "31        1  \n",
       "..      ...  \n",
       "151       0  \n",
       "152      -1  \n",
       "153       0  \n",
       "154      -1  \n",
       "155       0  \n",
       "156       0  \n",
       "157       0  \n",
       "159       0  \n",
       "160       0  \n",
       "161       0  \n",
       "162      -1  \n",
       "163       0  \n",
       "164       1  \n",
       "165       0  \n",
       "166      -1  \n",
       "167       0  \n",
       "168       0  \n",
       "169       0  \n",
       "170       0  \n",
       "171       0  \n",
       "172       0  \n",
       "174       0  \n",
       "175       0  \n",
       "176       0  \n",
       "177       0  \n",
       "178       0  \n",
       "179       0  \n",
       "180       0  \n",
       "181       0  \n",
       "182       0  \n",
       "\n",
       "[169 rows x 16 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df[\"AGE\"]>20) & (df[\"WHITEL\"]==1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-31-276d3d5eac8f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"AGE\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__invert__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1141\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__invert__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1142\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1143\u001b[0;31m             \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moperator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values_from_object\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1144\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__array_wrap__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1145\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
     ]
    }
   ],
   "source": [
    "df[~df[\"AGE\"]>20]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DLHRWAGE</th>\n",
       "      <th>DEDUC1</th>\n",
       "      <th>AGE</th>\n",
       "      <th>AGESQ</th>\n",
       "      <th>HRWAGEH</th>\n",
       "      <th>WHITEH</th>\n",
       "      <th>MALEH</th>\n",
       "      <th>EDUCH</th>\n",
       "      <th>HRWAGEL</th>\n",
       "      <th>WHITEL</th>\n",
       "      <th>MALEL</th>\n",
       "      <th>EDUCL</th>\n",
       "      <th>DEDUC2</th>\n",
       "      <th>DTEN</th>\n",
       "      <th>DMARRIED</th>\n",
       "      <th>DUNCOV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [DLHRWAGE, DEDUC1, AGE, AGESQ, HRWAGEH, WHITEH, MALEH, EDUCH, HRWAGEL, WHITEL, MALEL, EDUCL, DEDUC2, DTEN, DMARRIED, DUNCOV]\n",
       "Index: []"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"AGE\"].isin((20,21,22,23))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DLHRWAGE</th>\n",
       "      <th>DEDUC1</th>\n",
       "      <th>AGE</th>\n",
       "      <th>AGESQ</th>\n",
       "      <th>HRWAGEH</th>\n",
       "      <th>WHITEH</th>\n",
       "      <th>MALEH</th>\n",
       "      <th>EDUCH</th>\n",
       "      <th>HRWAGEL</th>\n",
       "      <th>WHITEL</th>\n",
       "      <th>MALEL</th>\n",
       "      <th>EDUCL</th>\n",
       "      <th>DEDUC2</th>\n",
       "      <th>DTEN</th>\n",
       "      <th>DMARRIED</th>\n",
       "      <th>DUNCOV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19.898700</td>\n",
       "      <td>395.958243</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.084</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>2.109746891</td>\n",
       "      <td>0</td>\n",
       "      <td>19.222450</td>\n",
       "      <td>369.502598</td>\n",
       "      <td>61.53846154</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>7.462686567</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>3.25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18.781656</td>\n",
       "      <td>352.750617</td>\n",
       "      <td>4.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>4.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.083</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        DLHRWAGE  DEDUC1        AGE       AGESQ      HRWAGEH  WHITEH  MALEH  \\\n",
       "57             0       0  19.898700  395.958243            6       1      1   \n",
       "82   2.109746891       0  19.222450  369.502598  61.53846154       1      1   \n",
       "173            0       0  18.781656  352.750617         4.25       1      0   \n",
       "\n",
       "     EDUCH      HRWAGEL  WHITEL  MALEL  EDUCL  DEDUC2    DTEN  DMARRIED  \\\n",
       "57      13            6       1      1     13       0  -0.084         0   \n",
       "82      12  7.462686567       1      1     12       0    3.25         0   \n",
       "173     13         4.25       1      0     13       0  -0.083         0   \n",
       "\n",
       "     DUNCOV  \n",
       "57        0  \n",
       "82        0  \n",
       "173       0  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[~(df[\"AGE\"]>20)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11, 16)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"WHITEL\"]==0].shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(89, 16)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df[\"WHITEH\"]==1) & (df[\"DEDUC1\"]!=0)].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Series.mean of Series([], Name: AGE, dtype: float64)>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df[\"DMARRIED\"]==1) & (df[\"WHITEL\"]!=1)&(df[\"MALEL\"]==1)][\"AGE\"].mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DLHRWAGE</th>\n",
       "      <th>DEDUC1</th>\n",
       "      <th>AGE</th>\n",
       "      <th>AGESQ</th>\n",
       "      <th>HRWAGEH</th>\n",
       "      <th>WHITEH</th>\n",
       "      <th>MALEH</th>\n",
       "      <th>EDUCH</th>\n",
       "      <th>HRWAGEL</th>\n",
       "      <th>WHITEL</th>\n",
       "      <th>MALEL</th>\n",
       "      <th>EDUCL</th>\n",
       "      <th>DEDUC2</th>\n",
       "      <th>DTEN</th>\n",
       "      <th>DMARRIED</th>\n",
       "      <th>DUNCOV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>0.014888613</td>\n",
       "      <td>0</td>\n",
       "      <td>29.185489</td>\n",
       "      <td>851.792791</td>\n",
       "      <td>10.15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4.583</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>-0.223143551</td>\n",
       "      <td>1</td>\n",
       "      <td>30.450376</td>\n",
       "      <td>927.225426</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>12.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>-3</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>0.619039208</td>\n",
       "      <td>-7</td>\n",
       "      <td>31.208761</td>\n",
       "      <td>973.986771</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>7</td>\n",
       "      <td>-7</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         DLHRWAGE  DEDUC1        AGE       AGESQ HRWAGEH  WHITEH  MALEH  \\\n",
       "88    0.014888613       0  29.185489  851.792791   10.15       0      1   \n",
       "93   -0.223143551       1  30.450376  927.225426      10       1      0   \n",
       "154   0.619039208      -7  31.208761  973.986771      13       0      0   \n",
       "\n",
       "     EDUCH HRWAGEL  WHITEL  MALEL  EDUCL  DEDUC2   DTEN  DMARRIED  DUNCOV  \n",
       "88      12      10       1      1     12       0  4.583        -1       0  \n",
       "93      15    12.5       0      0     14       0     -3        -1       0  \n",
       "154      8       7       1      0     15       7     -7         0      -1  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"WHITEH\"]!=df[\"WHITEL\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid character in identifier (<ipython-input-44-5ae9330997c5>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-44-5ae9330997c5>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    df[“WHITEL”].value_counts()\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character in identifier\n"
     ]
    }
   ],
   "source": [
    "df[“WHITEL”].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    172\n",
       "0     11\n",
       "Name: WHITEL, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"WHITEL\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>WHITEL</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WHITEH</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "WHITEL   0    1\n",
       "WHITEH         \n",
       "0       10    2\n",
       "1        1  170"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(df[\"WHITEH\"], df[\"WHITEL\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-51-a29ad32e03f7>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-51-a29ad32e03f7>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    df[[\"DEDUC2,\"EDUCL\"].corr()\u001b[0m\n\u001b[0m                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "df[[\"DEDUC2,\"EDUCL\"].corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>MALEH</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALEH</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>99</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "MALEH   0   1\n",
       "MALEH        \n",
       "0      99   0\n",
       "1       0  84"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(df[\"MALEH\"], df[\"MALEH\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'spearman' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-56-459782e32b1a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"EDUCH\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"EDUCL\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspearman\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'spearman' is not defined"
     ]
    }
   ],
   "source": [
    "df[[\"EDUCH\", \"EDUCL\"]].corr(spearman)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EDUCH</th>\n",
       "      <th>EDUCL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EDUCH</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.657646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EDUCL</th>\n",
       "      <td>0.657646</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          EDUCH     EDUCL\n",
       "EDUCH  1.000000  0.657646\n",
       "EDUCL  0.657646  1.000000"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"EDUCH\", \"EDUCL\"]].corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"DMARRIED\"] = df[\"DMARRIED\"].astype(bool)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"WHITEH\"] = df[\"WHITEH\"].astype(\"category\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"HRWAGEH\"] = pd.to_numeric(df[\"HRWAGEH\"], errors=\"coerce\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"HRWAGEH\"] = pd.to_numeric(df[\"HRWAGEH\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.sort_values(by=\"HRWAGEH\") #sort by column "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[sorted(df.columns)] # re-order columns alphabetically"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"new\"] = 9 # add new column "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"AGETR\"] = df[\"AGE\"]**3 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"HRWAGEH_new\"] = df[\"HRWAGEH\"].fillna(0) # fill missings with 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna(subset=[\"HRWAGEH\"]) # drop rows missing in the variable'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "grouped = df.groupby([\"MALEH\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MALEH\n",
      "0    36.055111\n",
      "1    37.923953\n",
      "Name: AGE, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(grouped[\"AGE\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            mean   sum\n",
      "MALEH                 \n",
      "0      13.917647  1183\n",
      "1      14.092105  1071\n"
     ]
    }
   ],
   "source": [
    "print(grouped[\"EDUCH\"].agg([\"mean\", \"sum\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           EDUCH                  AGE           \n",
      "            mean       std       mean        std\n",
      "MALEH                                           \n",
      "0      13.917647  2.274139  36.055111   9.749019\n",
      "1      14.092105  2.240105  37.923953  12.326690\n"
     ]
    }
   ],
   "source": [
    "print(grouped[[\"EDUCH\", \"AGE\"]].agg([\"mean\", \"std\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              AGE MALEH\n",
      "              var   var\n",
      "MALEH                  \n",
      "0       95.043367     0\n",
      "1      151.947282     0\n"
     ]
    }
   ],
   "source": [
    "print(grouped[[\"AGE\", \"MALEH\"]].agg([\"var\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         EDUCL                                                       MALEH  \\\n",
      "      describe                                                    describe   \n",
      "         count       mean       std   min   25%   50%   75%   max    count   \n",
      "MALEH                                                                        \n",
      "0         85.0  13.929412  2.004686  10.0  12.0  14.0  16.0  19.0     85.0   \n",
      "1         76.0  14.250000  2.355844   8.0  12.0  14.0  16.0  20.0     76.0   \n",
      "\n",
      "                                          \n",
      "                                          \n",
      "      mean  std  min  25%  50%  75%  max  \n",
      "MALEH                                     \n",
      "0      0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
      "1      1.0  0.0  1.0  1.0  1.0  1.0  1.0  \n"
     ]
    }
   ],
   "source": [
    "print(grouped[[\"EDUCL\", \"MALEH\"]].agg([\"describe\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "grouped2 = df.groupby([\"MALEL\", \"MALEH\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MALEL  MALEH\n",
      "0      0        36.055111\n",
      "1      1        37.923953\n",
      "Name: AGE, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(grouped2[\"AGE\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "d = {\"employee\": [\"Hannes\", \"Fabiana\",\"George\", \"Olga\"], \"group\": [\"Accounting\", \"Engineering\", \"Engineering\", \"HR\"]}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.DataFrame.from_dict(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = [(\"Hannes\", 2004), (\"Fabiana\", 2008), (\"George\", 2012), (\"Olga\", 2014)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = pd.DataFrame.from_records(t, columns=[\"employee\", \"hire_date\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py:6211: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  sort=sort)\n"
     ]
    }
   ],
   "source": [
    "df3 = df1.append(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "df4 = pd.concat([df1, df2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "df5 = pd.concat([df1, df2], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "df6 = df1.merge(df2, left_on=\"employee\", right_on=\"employee\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  employee        group  hire_date\n",
      "0   Hannes   Accounting        NaN\n",
      "1  Fabiana  Engineering        NaN\n",
      "2   George  Engineering        NaN\n",
      "3     Olga           HR        NaN\n",
      "0   Hannes          NaN     2004.0\n",
      "1  Fabiana          NaN     2008.0\n",
      "2   George          NaN     2012.0\n",
      "3     Olga          NaN     2014.0\n"
     ]
    }
   ],
   "source": [
    "print(df3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  employee        group  hire_date\n",
      "0   Hannes   Accounting        NaN\n",
      "1  Fabiana  Engineering        NaN\n",
      "2   George  Engineering        NaN\n",
      "3     Olga           HR        NaN\n",
      "0   Hannes          NaN     2004.0\n",
      "1  Fabiana          NaN     2008.0\n",
      "2   George          NaN     2012.0\n",
      "3     Olga          NaN     2014.0\n"
     ]
    }
   ],
   "source": [
    "print(df4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  employee        group employee  hire_date\n",
      "0   Hannes   Accounting   Hannes       2004\n",
      "1  Fabiana  Engineering  Fabiana       2008\n",
      "2   George  Engineering   George       2012\n",
      "3     Olga           HR     Olga       2014\n"
     ]
    }
   ],
   "source": [
    "print(df5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  employee        group  hire_date\n",
      "0   Hannes   Accounting       2004\n",
      "1  Fabiana  Engineering       2008\n",
      "2   George  Engineering       2012\n",
      "3     Olga           HR       2014\n"
     ]
    }
   ],
   "source": [
    "print(df6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "pivoted = df6.pivot(index=\"employee\", columns=\"group\", values=\"hire_date\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "reverse = pivoted.reset_index().melt(id_vars=\"employee\", value_name=\"hire_date\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "group     Accounting  Engineering      HR\n",
      "employee                                 \n",
      "Fabiana          NaN       2008.0     NaN\n",
      "George           NaN       2012.0     NaN\n",
      "Hannes        2004.0          NaN     NaN\n",
      "Olga             NaN          NaN  2014.0\n"
     ]
    }
   ],
   "source": [
    "print(pivoted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   employee        group  hire_date\n",
      "0   Fabiana   Accounting        NaN\n",
      "1    George   Accounting        NaN\n",
      "2    Hannes   Accounting     2004.0\n",
      "3      Olga   Accounting        NaN\n",
      "4   Fabiana  Engineering     2008.0\n",
      "5    George  Engineering     2012.0\n",
      "6    Hannes  Engineering        NaN\n",
      "7      Olga  Engineering        NaN\n",
      "8   Fabiana           HR        NaN\n",
      "9    George           HR        NaN\n",
      "10   Hannes           HR        NaN\n",
      "11     Olga           HR     2014.0\n"
     ]
    }
   ],
   "source": [
    "print(reverse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({\"name\": [\"Johanna\", \"Alex\", \"Dennis\", \"Maripjan\", \"Liza\", \"Michael\"],\n",
    "                  \"age\": [27, 24, 29, 23, 23, 30], \n",
    "                  \"gender\": [\"f\", \"m\", \"m\", \"m\", \"f\", \"m\"], \n",
    "                  \"citizenship\": [\"ger\",\"per\",\"ger\",\"kg\",\"rus\",\"ger\"],\n",
    "                  'years_academia':[1,1,3,-1,-1,5]\n",
    "                  \n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12256b7f0>"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.scatter(x=\"age\", y=\"years_academia\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11fc55908>"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.bar(x=\"name\", y=\"age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, 'Johanna'),\n",
       " Text(0, 0, 'Alex'),\n",
       " Text(0, 0, 'Dennis'),\n",
       " Text(0, 0, 'Maripjan'),\n",
       " Text(0, 0, 'Liza'),\n",
       " Text(0, 0, 'Michael')]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXYAAAEKCAYAAAAGvn7fAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJzt3Xl8VPW9//HXJyEQwhKWhH0JYV9EwCAgmyKirfvWautCRcG2Wr329t7bn21dbr2/+/N2u629RRTEnWqtdblWSZTFhSVBkGUCIovsk7ATIAlJvr8/ZkLjmECWk8z2fj4eeZCZOfmez2wfznznnPcx5xwiIhI7EsJdgIiIeEuNXUQkxqixi4jEGDV2EZEYo8YuIhJj1NhFRGKMGruISIxRYxcRiTFq7CIiMaZZOFaalpbmMjIywrFqEZGotWrVqv3OufSzLReWxp6RkUFeXl44Vi0iErXM7MvaLKepGBGRGKPGLiISY9TYRURiTFjm2Ktz6tQpdu3aRXFxcbhLEQ8kJyfTo0cPkpKSwl2KSNyJmMa+a9cu2rRpQ0ZGBmYW7nKkAZxzHDhwgF27dtGnT59wlyMSdzxp7Ga2HTgGlANlzrmsuo5RXFysph4jzIyOHTtSWFgY7lJE4pKXW+wXOef2N2QANfXYoedSJHz05amISBM4VnyKX77tY9v+442+Lq8auwMWmtkqM5tZ3QJmNtPM8swsTx/RRSTeLPm8kKc/2sb+opJGX5dXjX28c24U8A3gh2Y2KXQB59wc51yWcy4rPf2sR8SKBxYvXswVV1zhyVi/+MUvyMnJ8WQskXiU7fPToVVzRvVq3+jr8mSO3Tm3J/hvgZm9DpwPLPVi7GhWXl5OYmJiuMvwxKOPPhruEkSi1qnyChZtLGDa0C4kJjT+908Nbuxm1gpIcM4dC/4+DWhQF3jkrQ349hxtaGlfMaRbWx66cmiNt//85z8nLS2N++67D4AHH3yQzp07U1JSwiuvvEJJSQnXXnstjzzyCADXXHMNO3fupLi4mPvuu4+ZMwMzUK1bt+aBBx7gvffe49e//jVvv/02b775Js2aNWPatGn86le/qnb9b731Fr/85S8pLS2lY8eOvPjii3Tu3JmioiLuvfde8vLyMDMeeughrr/+er7//e+Tm5vLyZMnueGGG07X9e6773L//feTlpbGqFGjTo9//Phx7r33XtatW0dZWRkPP/wwV199NfPnz+dvf/sb5eXlrF+/nh//+MeUlpby/PPP06JFC9555x06dOjA9OnTueKKK7jhhht49NFHeeuttzh58iQXXHABTz75pL4sFTmDldsOcrS4jEuGdG6S9XkxFdMZ+MjMPgNWAv/rnHvXg3Gb1IwZM3j22WcBqKioYMGCBXTu3JnNmzezcuVK1qxZw6pVq1i6NPBBZN68eaxatYq8vDx+//vfc+DAASDQQIcNG8aKFSsYMmQIr7/+Ohs2bGDt2rX87Gc/q3H9EyZMYPny5axevZqbbrqJxx9/HIB///d/JzU1lXXr1rF27VqmTJkCwGOPPUZeXh5r165lyZIlrF27luLiYu666y7eeustPvzwQ/bt23d6/Mcee4wpU6aQm5vLokWL+MlPfsLx44EvcdavX89LL73EypUrefDBB0lJSWH16tWMGzeO55577mu13nPPPeTm5rJ+/XpOnjzJ22+/7cEzIBK7sn1+WjRLYGL/tCZZX4O32J1zW4FzPajltDNtWTeWjIwMOnbsyOrVq/H7/YwcOZLc3FwWLlzIyJEjASgqKmLz5s1MmjSJ3//+97z++usA7Ny5k82bN9OxY0cSExO5/vrrAWjbti3JycnceeedXH755Wec7961axff/va32bt3L6WlpacP7MnJyWHBggWnl2vfPjA/98orrzBnzhzKysrYu3cvPp+PiooK+vTpQ//+/QG45ZZbmDNnDgALFy7kzTffPP2Jobi4mB07dgBw0UUX0aZNG9q0aUNqaipXXnklAOeccw5r1679Wq2LFi3i8ccf58SJExw8eJChQ4ee/hsR+SrnHNk+PxP7p5HSvGmOCY2YI08jwZ133sn8+fPZt28fd9xxB++//z4//elPmTVr1leWW7x4MTk5OSxbtoyUlBQuvPDC01EIycnJp+fVmzVrxsqVK3n//fdZsGABTzzxBB988EG167733nt54IEHuOqqq1i8eDEPP/wwEHhRhE5zbNu2jV/96lfk5ubSvn17pk+ffnr9NU2JOOd47bXXGDhw4FeuX7FiBS1atDh9OSEh4fTlhIQEysrKvrJ8cXExP/jBD8jLy6Nnz548/PDDioEQOYP8vcfYffgkP7q4X5OtU/uxV3Httdfy7rvvkpuby6WXXsqll17KvHnzKCoqAmD3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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "df.plot.line(x=\"name\", y=\"years_academia\", ax=ax)\n",
    "ax.set_xticklabels(df[\"name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['__class__',\n",
       " '__delattr__',\n",
       " '__dict__',\n",
       " '__dir__',\n",
       " '__doc__',\n",
       " '__eq__',\n",
       " '__format__',\n",
       " '__ge__',\n",
       " '__getattribute__',\n",
       " '__getstate__',\n",
       " '__gt__',\n",
       " '__hash__',\n",
       " '__init__',\n",
       " '__init_subclass__',\n",
       " '__le__',\n",
       " '__lt__',\n",
       " '__module__',\n",
       " '__ne__',\n",
       " '__new__',\n",
       " '__reduce__',\n",
       " '__reduce_ex__',\n",
       " '__repr__',\n",
       " '__setattr__',\n",
       " '__setstate__',\n",
       " '__sizeof__',\n",
       " '__str__',\n",
       " '__subclasshook__',\n",
       " '__weakref__',\n",
       " '_add_text',\n",
       " '_adjustable',\n",
       " '_agg_filter',\n",
       " '_alpha',\n",
       " '_anchor',\n",
       " '_animated',\n",
       " '_aspect',\n",
       " '_autoscaleXon',\n",
       " '_autoscaleYon',\n",
       " '_autotitlepos',\n",
       " '_axes',\n",
       " '_axes_class',\n",
       " '_axes_locator',\n",
       " '_axisbelow',\n",
       " '_cachedRenderer',\n",
       " '_clipon',\n",
       " '_clippath',\n",
       " '_connected',\n",
       " '_contains',\n",
       " '_current_image',\n",
       " '_facecolor',\n",
       " '_frameon',\n",
       " '_gci',\n",
       " '_gen_axes_patch',\n",
       " '_gen_axes_spines',\n",
       " '_get_axis_list',\n",
       " '_get_lines',\n",
       " '_get_patches_for_fill',\n",
       " '_get_view',\n",
       " '_gid',\n",
       " '_gridOn',\n",
       " '_hold',\n",
       " '_in_layout',\n",
       " '_init_axis',\n",
       " '_label',\n",
       " '_layoutbox',\n",
       " '_left_title',\n",
       " '_make_twin_axes',\n",
       " '_mouseover',\n",
       " '_mouseover_set',\n",
       " '_navigate',\n",
       " '_navigate_mode',\n",
       " '_oid',\n",
       " '_on_units_changed',\n",
       " '_originalPosition',\n",
       " '_path_effects',\n",
       " '_pcolorargs',\n",
       " '_picker',\n",
       " '_position',\n",
       " '_poslayoutbox',\n",
       " '_process_unit_info',\n",
       " '_prop_order',\n",
       " '_propobservers',\n",
       " '_quiver_units',\n",
       " '_rasterization_zorder',\n",
       " '_rasterized',\n",
       " '_remove_legend',\n",
       " '_remove_method',\n",
       " '_right_title',\n",
       " '_sci',\n",
       " '_set_artist_props',\n",
       " '_set_gc_clip',\n",
       " '_set_lim_and_transforms',\n",
       " '_set_position',\n",
       " '_set_title_offset_trans',\n",
       " '_set_view',\n",
       " '_set_view_from_bbox',\n",
       " '_shared_x_axes',\n",
       " '_shared_y_axes',\n",
       " '_sharex',\n",
       " '_sharey',\n",
       " '_sketch',\n",
       " '_snap',\n",
       " '_stale',\n",
       " '_sticky_edges',\n",
       " '_subplotspec',\n",
       " '_tight',\n",
       " '_transform',\n",
       " '_transformSet',\n",
       " '_twinned_axes',\n",
       " '_update_image_limits',\n",
       " '_update_line_limits',\n",
       " '_update_patch_limits',\n",
       " '_update_title_position',\n",
       " '_update_transScale',\n",
       " '_url',\n",
       " '_use_sticky_edges',\n",
       " '_validate_converted_limits',\n",
       " '_visible',\n",
       " '_xaxis_transform',\n",
       " '_xcid',\n",
       " '_xmargin',\n",
       " '_yaxis_transform',\n",
       " '_ycid',\n",
       " '_ymargin',\n",
       " 'acorr',\n",
       " 'add_artist',\n",
       " 'add_callback',\n",
       " 'add_child_axes',\n",
       " 'add_collection',\n",
       " 'add_container',\n",
       " 'add_image',\n",
       " 'add_line',\n",
       " 'add_patch',\n",
       " 'add_table',\n",
       " 'aname',\n",
       " 'angle_spectrum',\n",
       " 'annotate',\n",
       " 'apply_aspect',\n",
       " 'arrow',\n",
       " 'artists',\n",
       " 'autoscale',\n",
       " 'autoscale_view',\n",
       " 'axes',\n",
       " 'axhline',\n",
       " 'axhspan',\n",
       " 'axis',\n",
       " 'axison',\n",
       " 'axvline',\n",
       " 'axvspan',\n",
       " 'bar',\n",
       " 'barbs',\n",
       " 'barh',\n",
       " 'bbox',\n",
       " 'boxplot',\n",
       " 'broken_barh',\n",
       " 'bxp',\n",
       " 'callbacks',\n",
       " 'can_pan',\n",
       " 'can_zoom',\n",
       " 'change_geometry',\n",
       " 'child_axes',\n",
       " 'cla',\n",
       " 'clabel',\n",
       " 'clear',\n",
       " 'clipbox',\n",
       " 'cohere',\n",
       " 'colNum',\n",
       " 'collections',\n",
       " 'containers',\n",
       " 'contains',\n",
       " 'contains_point',\n",
       " 'contour',\n",
       " 'contourf',\n",
       " 'convert_xunits',\n",
       " 'convert_yunits',\n",
       " 'csd',\n",
       " 'dataLim',\n",
       " 'drag_pan',\n",
       " 'draw',\n",
       " 'draw_artist',\n",
       " 'end_pan',\n",
       " 'errorbar',\n",
       " 'eventplot',\n",
       " 'eventson',\n",
       " 'figbox',\n",
       " 'figure',\n",
       " 'fill',\n",
       " 'fill_between',\n",
       " 'fill_betweenx',\n",
       " 'findobj',\n",
       " 'fmt_xdata',\n",
       " 'fmt_ydata',\n",
       " 'format_coord',\n",
       " 'format_cursor_data',\n",
       " 'format_xdata',\n",
       " 'format_ydata',\n",
       " 'get_adjustable',\n",
       " 'get_agg_filter',\n",
       " 'get_alpha',\n",
       " 'get_anchor',\n",
       " 'get_animated',\n",
       " 'get_aspect',\n",
       " 'get_autoscale_on',\n",
       " 'get_autoscalex_on',\n",
       " 'get_autoscaley_on',\n",
       " 'get_axes_locator',\n",
       " 'get_axisbelow',\n",
       " 'get_children',\n",
       " 'get_clip_box',\n",
       " 'get_clip_on',\n",
       " 'get_clip_path',\n",
       " 'get_contains',\n",
       " 'get_cursor_data',\n",
       " 'get_data_ratio',\n",
       " 'get_data_ratio_log',\n",
       " 'get_default_bbox_extra_artists',\n",
       " 'get_facecolor',\n",
       " 'get_fc',\n",
       " 'get_figure',\n",
       " 'get_frame_on',\n",
       " 'get_geometry',\n",
       " 'get_gid',\n",
       " 'get_gridspec',\n",
       " 'get_images',\n",
       " 'get_in_layout',\n",
       " 'get_label',\n",
       " 'get_legend',\n",
       " 'get_legend_handles_labels',\n",
       " 'get_lines',\n",
       " 'get_navigate',\n",
       " 'get_navigate_mode',\n",
       " 'get_path_effects',\n",
       " 'get_picker',\n",
       " 'get_position',\n",
       " 'get_rasterization_zorder',\n",
       " 'get_rasterized',\n",
       " 'get_renderer_cache',\n",
       " 'get_shared_x_axes',\n",
       " 'get_shared_y_axes',\n",
       " 'get_sketch_params',\n",
       " 'get_snap',\n",
       " 'get_subplotspec',\n",
       " 'get_tightbbox',\n",
       " 'get_title',\n",
       " 'get_transform',\n",
       " 'get_transformed_clip_path_and_affine',\n",
       " 'get_url',\n",
       " 'get_visible',\n",
       " 'get_window_extent',\n",
       " 'get_xaxis',\n",
       " 'get_xaxis_text1_transform',\n",
       " 'get_xaxis_text2_transform',\n",
       " 'get_xaxis_transform',\n",
       " 'get_xbound',\n",
       " 'get_xgridlines',\n",
       " 'get_xlabel',\n",
       " 'get_xlim',\n",
       " 'get_xmajorticklabels',\n",
       " 'get_xminorticklabels',\n",
       " 'get_xscale',\n",
       " 'get_xticklabels',\n",
       " 'get_xticklines',\n",
       " 'get_xticks',\n",
       " 'get_yaxis',\n",
       " 'get_yaxis_text1_transform',\n",
       " 'get_yaxis_text2_transform',\n",
       " 'get_yaxis_transform',\n",
       " 'get_ybound',\n",
       " 'get_ygridlines',\n",
       " 'get_ylabel',\n",
       " 'get_ylim',\n",
       " 'get_ymajorticklabels',\n",
       " 'get_yminorticklabels',\n",
       " 'get_yscale',\n",
       " 'get_yticklabels',\n",
       " 'get_yticklines',\n",
       " 'get_yticks',\n",
       " 'get_zorder',\n",
       " 'grid',\n",
       " 'has_data',\n",
       " 'have_units',\n",
       " 'hexbin',\n",
       " 'hist',\n",
       " 'hist2d',\n",
       " 'hitlist',\n",
       " 'hlines',\n",
       " 'ignore_existing_data_limits',\n",
       " 'images',\n",
       " 'imshow',\n",
       " 'in_axes',\n",
       " 'indicate_inset',\n",
       " 'indicate_inset_zoom',\n",
       " 'inset_axes',\n",
       " 'invert_xaxis',\n",
       " 'invert_yaxis',\n",
       " 'is_figure_set',\n",
       " 'is_first_col',\n",
       " 'is_first_row',\n",
       " 'is_last_col',\n",
       " 'is_last_row',\n",
       " 'is_transform_set',\n",
       " 'label_outer',\n",
       " 'legend',\n",
       " 'legend_',\n",
       " 'lines',\n",
       " 'locator_params',\n",
       " 'loglog',\n",
       " 'magnitude_spectrum',\n",
       " 'margins',\n",
       " 'matshow',\n",
       " 'minorticks_off',\n",
       " 'minorticks_on',\n",
       " 'mouseover',\n",
       " 'mouseover_set',\n",
       " 'name',\n",
       " 'numCols',\n",
       " 'numRows',\n",
       " 'patch',\n",
       " 'patches',\n",
       " 'pchanged',\n",
       " 'pcolor',\n",
       " 'pcolorfast',\n",
       " 'pcolormesh',\n",
       " 'phase_spectrum',\n",
       " 'pick',\n",
       " 'pickable',\n",
       " 'pie',\n",
       " 'plot',\n",
       " 'plot_date',\n",
       " 'properties',\n",
       " 'psd',\n",
       " 'quiver',\n",
       " 'quiverkey',\n",
       " 'redraw_in_frame',\n",
       " 'relim',\n",
       " 'remove',\n",
       " 'remove_callback',\n",
       " 'reset_position',\n",
       " 'rowNum',\n",
       " 'scatter',\n",
       " 'semilogx',\n",
       " 'semilogy',\n",
       " 'set',\n",
       " 'set_adjustable',\n",
       " 'set_agg_filter',\n",
       " 'set_alpha',\n",
       " 'set_anchor',\n",
       " 'set_animated',\n",
       " 'set_aspect',\n",
       " 'set_autoscale_on',\n",
       " 'set_autoscalex_on',\n",
       " 'set_autoscaley_on',\n",
       " 'set_axes_locator',\n",
       " 'set_axis_off',\n",
       " 'set_axis_on',\n",
       " 'set_axisbelow',\n",
       " 'set_clip_box',\n",
       " 'set_clip_on',\n",
       " 'set_clip_path',\n",
       " 'set_contains',\n",
       " 'set_facecolor',\n",
       " 'set_fc',\n",
       " 'set_figure',\n",
       " 'set_frame_on',\n",
       " 'set_gid',\n",
       " 'set_in_layout',\n",
       " 'set_label',\n",
       " 'set_navigate',\n",
       " 'set_navigate_mode',\n",
       " 'set_path_effects',\n",
       " 'set_picker',\n",
       " 'set_position',\n",
       " 'set_prop_cycle',\n",
       " 'set_rasterization_zorder',\n",
       " 'set_rasterized',\n",
       " 'set_sketch_params',\n",
       " 'set_snap',\n",
       " 'set_subplotspec',\n",
       " 'set_title',\n",
       " 'set_transform',\n",
       " 'set_url',\n",
       " 'set_visible',\n",
       " 'set_xbound',\n",
       " 'set_xlabel',\n",
       " 'set_xlim',\n",
       " 'set_xmargin',\n",
       " 'set_xscale',\n",
       " 'set_xticklabels',\n",
       " 'set_xticks',\n",
       " 'set_ybound',\n",
       " 'set_ylabel',\n",
       " 'set_ylim',\n",
       " 'set_ymargin',\n",
       " 'set_yscale',\n",
       " 'set_yticklabels',\n",
       " 'set_yticks',\n",
       " 'set_zorder',\n",
       " 'specgram',\n",
       " 'spines',\n",
       " 'spy',\n",
       " 'stackplot',\n",
       " 'stale',\n",
       " 'stale_callback',\n",
       " 'start_pan',\n",
       " 'stem',\n",
       " 'step',\n",
       " 'sticky_edges',\n",
       " 'streamplot',\n",
       " 'table',\n",
       " 'tables',\n",
       " 'text',\n",
       " 'texts',\n",
       " 'tick_params',\n",
       " 'ticklabel_format',\n",
       " 'title',\n",
       " 'titleOffsetTrans',\n",
       " 'transAxes',\n",
       " 'transData',\n",
       " 'transLimits',\n",
       " 'transScale',\n",
       " 'tricontour',\n",
       " 'tricontourf',\n",
       " 'tripcolor',\n",
       " 'triplot',\n",
       " 'twinx',\n",
       " 'twiny',\n",
       " 'update',\n",
       " 'update_datalim',\n",
       " 'update_datalim_bounds',\n",
       " 'update_from',\n",
       " 'update_params',\n",
       " 'use_sticky_edges',\n",
       " 'viewLim',\n",
       " 'violin',\n",
       " 'violinplot',\n",
       " 'vlines',\n",
       " 'xaxis',\n",
       " 'xaxis_date',\n",
       " 'xaxis_inverted',\n",
       " 'xcorr',\n",
       " 'yaxis',\n",
       " 'yaxis_date',\n",
       " 'yaxis_inverted',\n",
       " 'zorder']"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "savefig() missing 1 required positional argument: 'fname'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-112-a295b41f84dc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    687\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m     \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgcf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 689\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    690\u001b[0m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m# need this if 'transparent=True' to reset colors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    691\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: savefig() missing 1 required positional argument: 'fname'"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.savefig()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 17.200000000000003, 'Students')"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ax.set_xlabel(\"Students\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x122757ac8>"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(12,6))\n",
    "df.plot.line(x=\"name\", y=\"years_academia\", ax=ax)\n",
    "ax.set_xticklabels(df[\"name\"])\n",
    "ax.set_xlabel(\"Students\")\n",
    "ax.set_ylabel(\"Years in academia\")\n",
    "ax.xaxis.grid(True)\n",
    "ax.set_title(\"Example\")\n",
    "plt.legend(loc=\"center left\", title=\"legend\")\n",
    "df.plot.line(x=\"name\", y=\"age\", color=\"red\", style=\"-.\", ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>gender</th>\n",
       "      <th>f</th>\n",
       "      <th>m</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>citizenship</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ger</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>kg</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>per</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rus</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "gender         f    m\n",
       "citizenship          \n",
       "ger          1.0  2.0\n",
       "kg           NaN  1.0\n",
       "per          NaN  1.0\n",
       "rus          1.0  NaN"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped = df.groupby([\"citizenship\", \"gender\"])[\"name\"].size().unstack()\n",
    "grouped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1229bb780>"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEQCAYAAABLMTQcAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAFh1JREFUeJzt3X+U1fV95/Hnmx+CURcbmNOqiIMNGwNSFEajMVGrsdFoIEkxSt1Gk3g4mpiYbbubRM+J1mxz2l1PbIw/WLoakx5QI2okUZOtK9EQDTooIoi0aOk6lVXEqiGKAfLeP+7FjuPFuQPf4Xo/PB/n3DPfH5/7/b7nMvPiM5/vr8hMJEllGdLqAiRJ1TPcJalAhrskFchwl6QCGe6SVCDDXZIKZLhLUoEMd0kqkOEuSQUa1qodjxkzJjs7O1u1e0lqS0uXLn0hMzv6a9eycO/s7KS7u7tVu5ekthQR/9JMO4dlJKlAhrskFchwl6QCtWzMXZJ2lc2bN9PT08OmTZtaXUrTRo4cydixYxk+fPgOvd9wl1S8np4e9tlnHzo7O4mIVpfTr8xkw4YN9PT0MH78+B3aRr/DMhExMiIeiojHImJlRPxlgzYjIuLmiFgTEUsionOHqpGkQbBp0yZGjx7dFsEOEBGMHj16p/7SaGbM/XXghMycAhwGnBwRR/Vp8zng3zLzPcAVwN/scEWSNAjaJdi32dl6+w33rNlYnx1ef/V9Nt8M4Hv16QXAidFun6QkFaSpMfeIGAosBd4DXJ2ZS/o0OQB4BiAzt0TEy8Bo4IU+25kNzAYYN27czlXeyKWjqt/mYLj05VZXIGkQnXPOOZx22mnMnDmzZTU0dSpkZm7NzMOAscCREXFonyaNeulvefJ2Zs7NzK7M7Oro6PfqWUnaLWzZsqXybQ7oPPfMfAn4GXByn1U9wIEAETEMGAW8WEF9kjSovvGNb3DIIYdw0kknMWvWLC6//HKeeuopTj75ZKZNm8aHPvQhnnzySaDWI//Sl77EBz7wAQ4++GAWLFgA1M5uueCCC5g4cSKnnnoqzz///BvbX7p0KccddxzTpk3jIx/5COvWrQPg+OOP56KLLuK4447j29/+duXfV7/DMhHRAWzOzJciYk/gw7z1gOlC4GzgQWAmcG9mvqXnLknvJN3d3dx66608+uijbNmyhalTpzJt2jRmz57NnDlzmDBhAkuWLOHzn/889957LwDr1q1j8eLFPPnkk0yfPp2ZM2dy++23s3r1ah5//HGee+45Jk6cyGc/+1k2b97MF7/4Re644w46Ojq4+eabufjii7n++usBeOmll7jvvvsG5XtrZsx9P+B79XH3IcAPMvPHEXEZ0J2ZC4HrgL+PiDXUeuxnDkq1klShxYsXM2PGDPbcc08APvaxj7Fp0yYeeOABTj/99Dfavf76629Mf/zjH2fIkCFMnDiR5557DoD777+fWbNmMXToUPbff39OOOEEAFavXs2KFSs46aSTANi6dSv77bffG9s644wzBu176zfcM3M5cHiD5V/vNb0JOL1vG0l6J2s0wPDb3/6Wfffdl2XLljV8z4gRIxq+v9EJgpnJpEmTePDBBxtua6+99hpoyU3z3jKSdlsf/OAH+dGPfsSmTZvYuHEjd955J+9617sYP348t9xyC1AL6Mcee+xtt3Psscdy0003sXXrVtatW8eiRYsAeO9738v69evfCPfNmzezcuXKwf2m6gx3SbutI444gunTpzNlyhQ++clP0tXVxahRo5g3bx7XXXcdU6ZMYdKkSdxxxx1vu51PfOITTJgwgcmTJ3P++edz3HHHAbDHHnuwYMECvvKVrzBlyhQOO+wwHnjggV3xrRGtOu7Z1dWVlT+sw/PcJTWwatUq3ve+9zVct3HjRvbee29effVVjj32WObOncvUqVN3cYWNNao7IpZmZld/7/XGYZJ2a7Nnz+aJJ55g06ZNnH322e+YYN9Zhruk3dr8+fNbXcKgcMxdkgpkuEtSgQx3SSqQ4S5JBfKAqqTdTudX76x0e2v/+tSm2l155ZVce+21TJ06lXnz5lVaQ1+GuyTtItdccw133333Dj8XdSAclpGkXeC8887j6aefZvr06VxxxRWDvj977pK0C8yZM4ef/OQnLFq0iDFjxgz6/uy5S1KBDHdJKpDhLkkFcsxd0m6n2VMX25nhLkm7yNq1a3fZvhyWkaQCGe6SVCDDXZIKZLhLUoEMd0kqkOEuSQXyVEhJu59LR1W8vZer3V4F7LlLUoH6DfeIODAiFkXEqohYGREXNmhzfES8HBHL6q+vD065ktSe1q5dyyGHHMK5557LoYceyllnncU999zDMcccw4QJE3jooYcq3V8zPfctwJ9n5vuAo4Av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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped.plot.bar(stacked=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12295e748>"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped.T.plot.bar(stacked=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set(style=\"darkgrid\", palette=\"Set2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.99</td>\n",
       "      <td>1.01</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.34</td>\n",
       "      <td>1.66</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21.01</td>\n",
       "      <td>3.50</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23.68</td>\n",
       "      <td>3.31</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24.59</td>\n",
       "      <td>3.61</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   total_bill   tip     sex smoker  day    time  size\n",
       "0       16.99  1.01  Female     No  Sun  Dinner     2\n",
       "1       10.34  1.66    Male     No  Sun  Dinner     3\n",
       "2       21.01  3.50    Male     No  Sun  Dinner     3\n",
       "3       23.68  3.31    Male     No  Sun  Dinner     2\n",
       "4       24.59  3.61  Female     No  Sun  Dinner     4"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tips = sns.load_dataset(\"tips\")\n",
    "tips.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a24935b00>"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.relplot(x=\"total_bill\", y=\"tip\", data=tips)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.9.0'"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a24874c18>"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x=\"total_bill\", y=\"tip\", data=tips)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a2499ac50>"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 435.725x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.relplot(x=\"total_bill\", y=\"tip\", data=tips, hue=\"day\", style=\"smoker\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  subject  timepoint event    region    signal\n",
      "0     s13         18  stim  parietal -0.017552\n",
      "1      s5         14  stim  parietal -0.080883\n",
      "2     s12         18  stim  parietal -0.081033\n",
      "3     s11         18  stim  parietal -0.046134\n",
      "4     s10         18  stim  parietal -0.037970\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a24cb5780>"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fmri = sns.load_dataset(\"fmri\")\n",
    "print(fmri.head())\n",
    "sns.relplot(x=\"timepoint\", y=\"signal\", kind=\"line\", data=fmri)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a24edf320>"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 426.6x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.relplot(x=\"timepoint\", y=\"signal\", hue=\"event\", kind=\"line\", data=fmri, ci=\"sd\", style=\"event\", markers=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a251997f0>"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tips = sns.load_dataset(\"tips\")\n",
    "sns.catplot(x=\"day\", y=\"total_bill\", data=tips)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a250ff978>"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 436.975x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "titanic = sns.load_dataset(\"titanic\")\n",
    "sns.catplot(x=\"sex\", y=\"survived\", hue=\"class\", kind=\"bar\", data=titanic, ci=99)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a25421a58>"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x=\"total_bill\", y=\"tip\", data=tips, logx=True, marker=\"x\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2566c898>"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(tips[[\"total_bill\"]], annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1a259d2e80>"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "can only concatenate str (not \"int\") to str",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-138-39eedcffcf9a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"90\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m90\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"
     ]
    }
   ],
   "source": [
    "x=\"90\"\n",
    "y = 100\n",
    "z = x + 90"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(\"90\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
